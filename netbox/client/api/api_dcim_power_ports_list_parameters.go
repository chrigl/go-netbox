// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPIDcimPowerPortsListParams creates a new APIDcimPowerPortsListParams object
// with the default values initialized.
func NewAPIDcimPowerPortsListParams() *APIDcimPowerPortsListParams {
	var ()
	return &APIDcimPowerPortsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIDcimPowerPortsListParamsWithTimeout creates a new APIDcimPowerPortsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIDcimPowerPortsListParamsWithTimeout(timeout time.Duration) *APIDcimPowerPortsListParams {
	var ()
	return &APIDcimPowerPortsListParams{

		timeout: timeout,
	}
}

// NewAPIDcimPowerPortsListParamsWithContext creates a new APIDcimPowerPortsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIDcimPowerPortsListParamsWithContext(ctx context.Context) *APIDcimPowerPortsListParams {
	var ()
	return &APIDcimPowerPortsListParams{

		Context: ctx,
	}
}

// NewAPIDcimPowerPortsListParamsWithHTTPClient creates a new APIDcimPowerPortsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIDcimPowerPortsListParamsWithHTTPClient(client *http.Client) *APIDcimPowerPortsListParams {
	var ()
	return &APIDcimPowerPortsListParams{
		HTTPClient: client,
	}
}

/*APIDcimPowerPortsListParams contains all the parameters to send to the API endpoint
for the api dcim power ports list operation typically these are written to a http.Request
*/
type APIDcimPowerPortsListParams struct {

	/*Cabled*/
	Cabled *string
	/*ConnectionStatus*/
	ConnectionStatus *string
	/*Device*/
	Device *string
	/*DeviceID*/
	DeviceID *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Name*/
	Name *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Tag*/
	Tag *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithTimeout(timeout time.Duration) *APIDcimPowerPortsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithContext(ctx context.Context) *APIDcimPowerPortsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithHTTPClient(client *http.Client) *APIDcimPowerPortsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCabled adds the cabled to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithCabled(cabled *string) *APIDcimPowerPortsListParams {
	o.SetCabled(cabled)
	return o
}

// SetCabled adds the cabled to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetCabled(cabled *string) {
	o.Cabled = cabled
}

// WithConnectionStatus adds the connectionStatus to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithConnectionStatus(connectionStatus *string) *APIDcimPowerPortsListParams {
	o.SetConnectionStatus(connectionStatus)
	return o
}

// SetConnectionStatus adds the connectionStatus to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetConnectionStatus(connectionStatus *string) {
	o.ConnectionStatus = connectionStatus
}

// WithDevice adds the device to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithDevice(device *string) *APIDcimPowerPortsListParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithDeviceID(deviceID *string) *APIDcimPowerPortsListParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithLimit adds the limit to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithLimit(limit *int64) *APIDcimPowerPortsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithName(name *string) *APIDcimPowerPortsListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithOffset(offset *int64) *APIDcimPowerPortsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithTag adds the tag to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) WithTag(tag *string) *APIDcimPowerPortsListParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the api dcim power ports list params
func (o *APIDcimPowerPortsListParams) SetTag(tag *string) {
	o.Tag = tag
}

// WriteToRequest writes these params to a swagger request
func (o *APIDcimPowerPortsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Cabled != nil {

		// query param cabled
		var qrCabled string
		if o.Cabled != nil {
			qrCabled = *o.Cabled
		}
		qCabled := qrCabled
		if qCabled != "" {
			if err := r.SetQueryParam("cabled", qCabled); err != nil {
				return err
			}
		}

	}

	if o.ConnectionStatus != nil {

		// query param connection_status
		var qrConnectionStatus string
		if o.ConnectionStatus != nil {
			qrConnectionStatus = *o.ConnectionStatus
		}
		qConnectionStatus := qrConnectionStatus
		if qConnectionStatus != "" {
			if err := r.SetQueryParam("connection_status", qConnectionStatus); err != nil {
				return err
			}
		}

	}

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
