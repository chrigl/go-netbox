// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"github.com/go-openapi/runtime"

	strfmt "github.com/go-openapi/strfmt"
)

// New creates a new api API client.
func New(transport runtime.ClientTransport, formats strfmt.Registry) *Client {
	return &Client{transport: transport, formats: formats}
}

/*
Client for api API
*/
type Client struct {
	transport runtime.ClientTransport
	formats   strfmt.Registry
}

/*
APICircuitsChoicesList api circuits choices list API
*/
func (a *Client) APICircuitsChoicesList(params *APICircuitsChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits__choices_list",
		Method:             "GET",
		PathPattern:        "/api/circuits/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsChoicesListOK), nil

}

/*
APICircuitsChoicesRead api circuits choices read API
*/
func (a *Client) APICircuitsChoicesRead(params *APICircuitsChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits__choices_read",
		Method:             "GET",
		PathPattern:        "/api/circuits/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsChoicesReadOK), nil

}

/*
APICircuitsCircuitTerminationsCreate api circuits circuit terminations create API
*/
func (a *Client) APICircuitsCircuitTerminationsCreate(params *APICircuitsCircuitTerminationsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTerminationsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTerminationsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-terminations_create",
		Method:             "POST",
		PathPattern:        "/api/circuits/circuit-terminations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTerminationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTerminationsCreateCreated), nil

}

/*
APICircuitsCircuitTerminationsDelete api circuits circuit terminations delete API
*/
func (a *Client) APICircuitsCircuitTerminationsDelete(params *APICircuitsCircuitTerminationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTerminationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTerminationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-terminations_delete",
		Method:             "DELETE",
		PathPattern:        "/api/circuits/circuit-terminations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTerminationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTerminationsDeleteNoContent), nil

}

/*
APICircuitsCircuitTerminationsList api circuits circuit terminations list API
*/
func (a *Client) APICircuitsCircuitTerminationsList(params *APICircuitsCircuitTerminationsListParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTerminationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTerminationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-terminations_list",
		Method:             "GET",
		PathPattern:        "/api/circuits/circuit-terminations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTerminationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTerminationsListOK), nil

}

/*
APICircuitsCircuitTerminationsPartialUpdate api circuits circuit terminations partial update API
*/
func (a *Client) APICircuitsCircuitTerminationsPartialUpdate(params *APICircuitsCircuitTerminationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTerminationsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTerminationsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-terminations_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/circuits/circuit-terminations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTerminationsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTerminationsPartialUpdateOK), nil

}

/*
APICircuitsCircuitTerminationsRead api circuits circuit terminations read API
*/
func (a *Client) APICircuitsCircuitTerminationsRead(params *APICircuitsCircuitTerminationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTerminationsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTerminationsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-terminations_read",
		Method:             "GET",
		PathPattern:        "/api/circuits/circuit-terminations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTerminationsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTerminationsReadOK), nil

}

/*
APICircuitsCircuitTerminationsUpdate api circuits circuit terminations update API
*/
func (a *Client) APICircuitsCircuitTerminationsUpdate(params *APICircuitsCircuitTerminationsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTerminationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTerminationsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-terminations_update",
		Method:             "PUT",
		PathPattern:        "/api/circuits/circuit-terminations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTerminationsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTerminationsUpdateOK), nil

}

/*
APICircuitsCircuitTypesCreate api circuits circuit types create API
*/
func (a *Client) APICircuitsCircuitTypesCreate(params *APICircuitsCircuitTypesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTypesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTypesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-types_create",
		Method:             "POST",
		PathPattern:        "/api/circuits/circuit-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTypesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTypesCreateCreated), nil

}

/*
APICircuitsCircuitTypesDelete api circuits circuit types delete API
*/
func (a *Client) APICircuitsCircuitTypesDelete(params *APICircuitsCircuitTypesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTypesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-types_delete",
		Method:             "DELETE",
		PathPattern:        "/api/circuits/circuit-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTypesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTypesDeleteNoContent), nil

}

/*
APICircuitsCircuitTypesList api circuits circuit types list API
*/
func (a *Client) APICircuitsCircuitTypesList(params *APICircuitsCircuitTypesListParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTypesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTypesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-types_list",
		Method:             "GET",
		PathPattern:        "/api/circuits/circuit-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTypesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTypesListOK), nil

}

/*
APICircuitsCircuitTypesPartialUpdate api circuits circuit types partial update API
*/
func (a *Client) APICircuitsCircuitTypesPartialUpdate(params *APICircuitsCircuitTypesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTypesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTypesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-types_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/circuits/circuit-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTypesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTypesPartialUpdateOK), nil

}

/*
APICircuitsCircuitTypesRead api circuits circuit types read API
*/
func (a *Client) APICircuitsCircuitTypesRead(params *APICircuitsCircuitTypesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTypesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTypesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-types_read",
		Method:             "GET",
		PathPattern:        "/api/circuits/circuit-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTypesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTypesReadOK), nil

}

/*
APICircuitsCircuitTypesUpdate api circuits circuit types update API
*/
func (a *Client) APICircuitsCircuitTypesUpdate(params *APICircuitsCircuitTypesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitTypesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuit-types_update",
		Method:             "PUT",
		PathPattern:        "/api/circuits/circuit-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitTypesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitTypesUpdateOK), nil

}

/*
APICircuitsCircuitsCreate api circuits circuits create API
*/
func (a *Client) APICircuitsCircuitsCreate(params *APICircuitsCircuitsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuits_create",
		Method:             "POST",
		PathPattern:        "/api/circuits/circuits/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitsCreateCreated), nil

}

/*
APICircuitsCircuitsDelete api circuits circuits delete API
*/
func (a *Client) APICircuitsCircuitsDelete(params *APICircuitsCircuitsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuits_delete",
		Method:             "DELETE",
		PathPattern:        "/api/circuits/circuits/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitsDeleteNoContent), nil

}

/*
APICircuitsCircuitsList api circuits circuits list API
*/
func (a *Client) APICircuitsCircuitsList(params *APICircuitsCircuitsListParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuits_list",
		Method:             "GET",
		PathPattern:        "/api/circuits/circuits/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitsListOK), nil

}

/*
APICircuitsCircuitsPartialUpdate api circuits circuits partial update API
*/
func (a *Client) APICircuitsCircuitsPartialUpdate(params *APICircuitsCircuitsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuits_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/circuits/circuits/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitsPartialUpdateOK), nil

}

/*
APICircuitsCircuitsRead api circuits circuits read API
*/
func (a *Client) APICircuitsCircuitsRead(params *APICircuitsCircuitsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuits_read",
		Method:             "GET",
		PathPattern:        "/api/circuits/circuits/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitsReadOK), nil

}

/*
APICircuitsCircuitsUpdate api circuits circuits update API
*/
func (a *Client) APICircuitsCircuitsUpdate(params *APICircuitsCircuitsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsCircuitsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsCircuitsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_circuits_update",
		Method:             "PUT",
		PathPattern:        "/api/circuits/circuits/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsCircuitsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsCircuitsUpdateOK), nil

}

/*
APICircuitsProvidersCreate api circuits providers create API
*/
func (a *Client) APICircuitsProvidersCreate(params *APICircuitsProvidersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_create",
		Method:             "POST",
		PathPattern:        "/api/circuits/providers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersCreateCreated), nil

}

/*
APICircuitsProvidersDelete api circuits providers delete API
*/
func (a *Client) APICircuitsProvidersDelete(params *APICircuitsProvidersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_delete",
		Method:             "DELETE",
		PathPattern:        "/api/circuits/providers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersDeleteNoContent), nil

}

/*
APICircuitsProvidersGraphs A convenience method for rendering graphs for a particular provider.
*/
func (a *Client) APICircuitsProvidersGraphs(params *APICircuitsProvidersGraphsParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersGraphsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersGraphsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_graphs",
		Method:             "GET",
		PathPattern:        "/api/circuits/providers/{id}/graphs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersGraphsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersGraphsOK), nil

}

/*
APICircuitsProvidersList api circuits providers list API
*/
func (a *Client) APICircuitsProvidersList(params *APICircuitsProvidersListParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_list",
		Method:             "GET",
		PathPattern:        "/api/circuits/providers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersListOK), nil

}

/*
APICircuitsProvidersPartialUpdate api circuits providers partial update API
*/
func (a *Client) APICircuitsProvidersPartialUpdate(params *APICircuitsProvidersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/circuits/providers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersPartialUpdateOK), nil

}

/*
APICircuitsProvidersRead api circuits providers read API
*/
func (a *Client) APICircuitsProvidersRead(params *APICircuitsProvidersReadParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_read",
		Method:             "GET",
		PathPattern:        "/api/circuits/providers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersReadOK), nil

}

/*
APICircuitsProvidersUpdate api circuits providers update API
*/
func (a *Client) APICircuitsProvidersUpdate(params *APICircuitsProvidersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APICircuitsProvidersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPICircuitsProvidersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_circuits_providers_update",
		Method:             "PUT",
		PathPattern:        "/api/circuits/providers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APICircuitsProvidersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APICircuitsProvidersUpdateOK), nil

}

/*
APIDcimChoicesList api dcim choices list API
*/
func (a *Client) APIDcimChoicesList(params *APIDcimChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim__choices_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimChoicesListOK), nil

}

/*
APIDcimChoicesRead api dcim choices read API
*/
func (a *Client) APIDcimChoicesRead(params *APIDcimChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim__choices_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimChoicesReadOK), nil

}

/*
APIDcimCablesCreate api dcim cables create API
*/
func (a *Client) APIDcimCablesCreate(params *APIDcimCablesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimCablesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimCablesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_cables_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/cables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimCablesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimCablesCreateCreated), nil

}

/*
APIDcimCablesDelete api dcim cables delete API
*/
func (a *Client) APIDcimCablesDelete(params *APIDcimCablesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimCablesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimCablesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_cables_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/cables/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimCablesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimCablesDeleteNoContent), nil

}

/*
APIDcimCablesList api dcim cables list API
*/
func (a *Client) APIDcimCablesList(params *APIDcimCablesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimCablesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimCablesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_cables_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/cables/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimCablesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimCablesListOK), nil

}

/*
APIDcimCablesPartialUpdate api dcim cables partial update API
*/
func (a *Client) APIDcimCablesPartialUpdate(params *APIDcimCablesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimCablesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimCablesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_cables_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/cables/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimCablesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimCablesPartialUpdateOK), nil

}

/*
APIDcimCablesRead api dcim cables read API
*/
func (a *Client) APIDcimCablesRead(params *APIDcimCablesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimCablesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimCablesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_cables_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/cables/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimCablesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimCablesReadOK), nil

}

/*
APIDcimCablesUpdate api dcim cables update API
*/
func (a *Client) APIDcimCablesUpdate(params *APIDcimCablesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimCablesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimCablesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_cables_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/cables/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimCablesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimCablesUpdateOK), nil

}

/*
APIDcimConnectedDeviceList This endpoint allows a user to determine what device (if any) is connected to a given peer device and peer
interface. This is useful in a situation where a device boots with no configuration, but can detect its neighbors
via a protocol such as LLDP. Two query parameters must be included in the request:

* `peer_device`: The name of the peer device
* `peer_interface`: The name of the peer interface
*/
func (a *Client) APIDcimConnectedDeviceList(params *APIDcimConnectedDeviceListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConnectedDeviceListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConnectedDeviceListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_connected-device_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/connected-device/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConnectedDeviceListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConnectedDeviceListOK), nil

}

/*
APIDcimConsoleConnectionsList api dcim console connections list API
*/
func (a *Client) APIDcimConsoleConnectionsList(params *APIDcimConsoleConnectionsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleConnectionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleConnectionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-connections_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-connections/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleConnectionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleConnectionsListOK), nil

}

/*
APIDcimConsolePortTemplatesCreate api dcim console port templates create API
*/
func (a *Client) APIDcimConsolePortTemplatesCreate(params *APIDcimConsolePortTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-port-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/console-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortTemplatesCreateCreated), nil

}

/*
APIDcimConsolePortTemplatesDelete api dcim console port templates delete API
*/
func (a *Client) APIDcimConsolePortTemplatesDelete(params *APIDcimConsolePortTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-port-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/console-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortTemplatesDeleteNoContent), nil

}

/*
APIDcimConsolePortTemplatesList api dcim console port templates list API
*/
func (a *Client) APIDcimConsolePortTemplatesList(params *APIDcimConsolePortTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-port-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortTemplatesListOK), nil

}

/*
APIDcimConsolePortTemplatesPartialUpdate api dcim console port templates partial update API
*/
func (a *Client) APIDcimConsolePortTemplatesPartialUpdate(params *APIDcimConsolePortTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-port-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/console-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortTemplatesPartialUpdateOK), nil

}

/*
APIDcimConsolePortTemplatesRead api dcim console port templates read API
*/
func (a *Client) APIDcimConsolePortTemplatesRead(params *APIDcimConsolePortTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-port-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortTemplatesReadOK), nil

}

/*
APIDcimConsolePortTemplatesUpdate api dcim console port templates update API
*/
func (a *Client) APIDcimConsolePortTemplatesUpdate(params *APIDcimConsolePortTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-port-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/console-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortTemplatesUpdateOK), nil

}

/*
APIDcimConsolePortsCreate api dcim console ports create API
*/
func (a *Client) APIDcimConsolePortsCreate(params *APIDcimConsolePortsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/console-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsCreateCreated), nil

}

/*
APIDcimConsolePortsDelete api dcim console ports delete API
*/
func (a *Client) APIDcimConsolePortsDelete(params *APIDcimConsolePortsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/console-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsDeleteNoContent), nil

}

/*
APIDcimConsolePortsList api dcim console ports list API
*/
func (a *Client) APIDcimConsolePortsList(params *APIDcimConsolePortsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsListOK), nil

}

/*
APIDcimConsolePortsPartialUpdate api dcim console ports partial update API
*/
func (a *Client) APIDcimConsolePortsPartialUpdate(params *APIDcimConsolePortsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/console-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsPartialUpdateOK), nil

}

/*
APIDcimConsolePortsRead api dcim console ports read API
*/
func (a *Client) APIDcimConsolePortsRead(params *APIDcimConsolePortsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsReadOK), nil

}

/*
APIDcimConsolePortsTrace Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
*/
func (a *Client) APIDcimConsolePortsTrace(params *APIDcimConsolePortsTraceParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsTraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_trace",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-ports/{id}/trace/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsTraceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsTraceOK), nil

}

/*
APIDcimConsolePortsUpdate api dcim console ports update API
*/
func (a *Client) APIDcimConsolePortsUpdate(params *APIDcimConsolePortsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsolePortsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsolePortsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-ports_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/console-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsolePortsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsolePortsUpdateOK), nil

}

/*
APIDcimConsoleServerPortTemplatesCreate api dcim console server port templates create API
*/
func (a *Client) APIDcimConsoleServerPortTemplatesCreate(params *APIDcimConsoleServerPortTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-port-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/console-server-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortTemplatesCreateCreated), nil

}

/*
APIDcimConsoleServerPortTemplatesDelete api dcim console server port templates delete API
*/
func (a *Client) APIDcimConsoleServerPortTemplatesDelete(params *APIDcimConsoleServerPortTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-port-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/console-server-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortTemplatesDeleteNoContent), nil

}

/*
APIDcimConsoleServerPortTemplatesList api dcim console server port templates list API
*/
func (a *Client) APIDcimConsoleServerPortTemplatesList(params *APIDcimConsoleServerPortTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-port-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-server-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortTemplatesListOK), nil

}

/*
APIDcimConsoleServerPortTemplatesPartialUpdate api dcim console server port templates partial update API
*/
func (a *Client) APIDcimConsoleServerPortTemplatesPartialUpdate(params *APIDcimConsoleServerPortTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-port-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/console-server-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortTemplatesPartialUpdateOK), nil

}

/*
APIDcimConsoleServerPortTemplatesRead api dcim console server port templates read API
*/
func (a *Client) APIDcimConsoleServerPortTemplatesRead(params *APIDcimConsoleServerPortTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-port-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-server-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortTemplatesReadOK), nil

}

/*
APIDcimConsoleServerPortTemplatesUpdate api dcim console server port templates update API
*/
func (a *Client) APIDcimConsoleServerPortTemplatesUpdate(params *APIDcimConsoleServerPortTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-port-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/console-server-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortTemplatesUpdateOK), nil

}

/*
APIDcimConsoleServerPortsCreate api dcim console server ports create API
*/
func (a *Client) APIDcimConsoleServerPortsCreate(params *APIDcimConsoleServerPortsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/console-server-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsCreateCreated), nil

}

/*
APIDcimConsoleServerPortsDelete api dcim console server ports delete API
*/
func (a *Client) APIDcimConsoleServerPortsDelete(params *APIDcimConsoleServerPortsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/console-server-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsDeleteNoContent), nil

}

/*
APIDcimConsoleServerPortsList api dcim console server ports list API
*/
func (a *Client) APIDcimConsoleServerPortsList(params *APIDcimConsoleServerPortsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-server-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsListOK), nil

}

/*
APIDcimConsoleServerPortsPartialUpdate api dcim console server ports partial update API
*/
func (a *Client) APIDcimConsoleServerPortsPartialUpdate(params *APIDcimConsoleServerPortsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/console-server-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsPartialUpdateOK), nil

}

/*
APIDcimConsoleServerPortsRead api dcim console server ports read API
*/
func (a *Client) APIDcimConsoleServerPortsRead(params *APIDcimConsoleServerPortsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-server-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsReadOK), nil

}

/*
APIDcimConsoleServerPortsTrace Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
*/
func (a *Client) APIDcimConsoleServerPortsTrace(params *APIDcimConsoleServerPortsTraceParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsTraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_trace",
		Method:             "GET",
		PathPattern:        "/api/dcim/console-server-ports/{id}/trace/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsTraceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsTraceOK), nil

}

/*
APIDcimConsoleServerPortsUpdate api dcim console server ports update API
*/
func (a *Client) APIDcimConsoleServerPortsUpdate(params *APIDcimConsoleServerPortsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimConsoleServerPortsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimConsoleServerPortsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_console-server-ports_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/console-server-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimConsoleServerPortsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimConsoleServerPortsUpdateOK), nil

}

/*
APIDcimDeviceBayTemplatesCreate api dcim device bay templates create API
*/
func (a *Client) APIDcimDeviceBayTemplatesCreate(params *APIDcimDeviceBayTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBayTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBayTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bay-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/device-bay-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBayTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBayTemplatesCreateCreated), nil

}

/*
APIDcimDeviceBayTemplatesDelete api dcim device bay templates delete API
*/
func (a *Client) APIDcimDeviceBayTemplatesDelete(params *APIDcimDeviceBayTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBayTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBayTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bay-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/device-bay-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBayTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBayTemplatesDeleteNoContent), nil

}

/*
APIDcimDeviceBayTemplatesList api dcim device bay templates list API
*/
func (a *Client) APIDcimDeviceBayTemplatesList(params *APIDcimDeviceBayTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBayTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBayTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bay-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-bay-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBayTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBayTemplatesListOK), nil

}

/*
APIDcimDeviceBayTemplatesPartialUpdate api dcim device bay templates partial update API
*/
func (a *Client) APIDcimDeviceBayTemplatesPartialUpdate(params *APIDcimDeviceBayTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBayTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBayTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bay-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/device-bay-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBayTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBayTemplatesPartialUpdateOK), nil

}

/*
APIDcimDeviceBayTemplatesRead api dcim device bay templates read API
*/
func (a *Client) APIDcimDeviceBayTemplatesRead(params *APIDcimDeviceBayTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBayTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBayTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bay-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-bay-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBayTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBayTemplatesReadOK), nil

}

/*
APIDcimDeviceBayTemplatesUpdate api dcim device bay templates update API
*/
func (a *Client) APIDcimDeviceBayTemplatesUpdate(params *APIDcimDeviceBayTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBayTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBayTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bay-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/device-bay-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBayTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBayTemplatesUpdateOK), nil

}

/*
APIDcimDeviceBaysCreate api dcim device bays create API
*/
func (a *Client) APIDcimDeviceBaysCreate(params *APIDcimDeviceBaysCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBaysCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBaysCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bays_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/device-bays/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBaysCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBaysCreateCreated), nil

}

/*
APIDcimDeviceBaysDelete api dcim device bays delete API
*/
func (a *Client) APIDcimDeviceBaysDelete(params *APIDcimDeviceBaysDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBaysDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBaysDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bays_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/device-bays/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBaysDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBaysDeleteNoContent), nil

}

/*
APIDcimDeviceBaysList api dcim device bays list API
*/
func (a *Client) APIDcimDeviceBaysList(params *APIDcimDeviceBaysListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBaysListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBaysListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bays_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-bays/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBaysListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBaysListOK), nil

}

/*
APIDcimDeviceBaysPartialUpdate api dcim device bays partial update API
*/
func (a *Client) APIDcimDeviceBaysPartialUpdate(params *APIDcimDeviceBaysPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBaysPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBaysPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bays_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/device-bays/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBaysPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBaysPartialUpdateOK), nil

}

/*
APIDcimDeviceBaysRead api dcim device bays read API
*/
func (a *Client) APIDcimDeviceBaysRead(params *APIDcimDeviceBaysReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBaysReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBaysReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bays_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-bays/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBaysReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBaysReadOK), nil

}

/*
APIDcimDeviceBaysUpdate api dcim device bays update API
*/
func (a *Client) APIDcimDeviceBaysUpdate(params *APIDcimDeviceBaysUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceBaysUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceBaysUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-bays_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/device-bays/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceBaysUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceBaysUpdateOK), nil

}

/*
APIDcimDeviceRolesCreate api dcim device roles create API
*/
func (a *Client) APIDcimDeviceRolesCreate(params *APIDcimDeviceRolesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceRolesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceRolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-roles_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/device-roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceRolesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceRolesCreateCreated), nil

}

/*
APIDcimDeviceRolesDelete api dcim device roles delete API
*/
func (a *Client) APIDcimDeviceRolesDelete(params *APIDcimDeviceRolesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceRolesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceRolesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-roles_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/device-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceRolesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceRolesDeleteNoContent), nil

}

/*
APIDcimDeviceRolesList api dcim device roles list API
*/
func (a *Client) APIDcimDeviceRolesList(params *APIDcimDeviceRolesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-roles_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceRolesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceRolesListOK), nil

}

/*
APIDcimDeviceRolesPartialUpdate api dcim device roles partial update API
*/
func (a *Client) APIDcimDeviceRolesPartialUpdate(params *APIDcimDeviceRolesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceRolesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceRolesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-roles_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/device-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceRolesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceRolesPartialUpdateOK), nil

}

/*
APIDcimDeviceRolesRead api dcim device roles read API
*/
func (a *Client) APIDcimDeviceRolesRead(params *APIDcimDeviceRolesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceRolesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceRolesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-roles_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceRolesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceRolesReadOK), nil

}

/*
APIDcimDeviceRolesUpdate api dcim device roles update API
*/
func (a *Client) APIDcimDeviceRolesUpdate(params *APIDcimDeviceRolesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceRolesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceRolesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-roles_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/device-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceRolesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceRolesUpdateOK), nil

}

/*
APIDcimDeviceTypesCreate api dcim device types create API
*/
func (a *Client) APIDcimDeviceTypesCreate(params *APIDcimDeviceTypesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceTypesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceTypesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-types_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/device-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceTypesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceTypesCreateCreated), nil

}

/*
APIDcimDeviceTypesDelete api dcim device types delete API
*/
func (a *Client) APIDcimDeviceTypesDelete(params *APIDcimDeviceTypesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceTypesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-types_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/device-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceTypesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceTypesDeleteNoContent), nil

}

/*
APIDcimDeviceTypesList api dcim device types list API
*/
func (a *Client) APIDcimDeviceTypesList(params *APIDcimDeviceTypesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceTypesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceTypesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-types_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceTypesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceTypesListOK), nil

}

/*
APIDcimDeviceTypesPartialUpdate api dcim device types partial update API
*/
func (a *Client) APIDcimDeviceTypesPartialUpdate(params *APIDcimDeviceTypesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceTypesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceTypesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-types_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/device-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceTypesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceTypesPartialUpdateOK), nil

}

/*
APIDcimDeviceTypesRead api dcim device types read API
*/
func (a *Client) APIDcimDeviceTypesRead(params *APIDcimDeviceTypesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceTypesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceTypesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-types_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/device-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceTypesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceTypesReadOK), nil

}

/*
APIDcimDeviceTypesUpdate api dcim device types update API
*/
func (a *Client) APIDcimDeviceTypesUpdate(params *APIDcimDeviceTypesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDeviceTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDeviceTypesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_device-types_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/device-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDeviceTypesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDeviceTypesUpdateOK), nil

}

/*
APIDcimDevicesCreate api dcim devices create API
*/
func (a *Client) APIDcimDevicesCreate(params *APIDcimDevicesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/devices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesCreateCreated), nil

}

/*
APIDcimDevicesDelete api dcim devices delete API
*/
func (a *Client) APIDcimDevicesDelete(params *APIDcimDevicesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/devices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesDeleteNoContent), nil

}

/*
APIDcimDevicesList api dcim devices list API
*/
func (a *Client) APIDcimDevicesList(params *APIDcimDevicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/devices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesListOK), nil

}

/*
APIDcimDevicesNapalm Execute a NAPALM method on a Device
*/
func (a *Client) APIDcimDevicesNapalm(params *APIDcimDevicesNapalmParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesNapalmOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesNapalmParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_napalm",
		Method:             "GET",
		PathPattern:        "/api/dcim/devices/{id}/napalm/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesNapalmReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesNapalmOK), nil

}

/*
APIDcimDevicesPartialUpdate api dcim devices partial update API
*/
func (a *Client) APIDcimDevicesPartialUpdate(params *APIDcimDevicesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/devices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesPartialUpdateOK), nil

}

/*
APIDcimDevicesRead api dcim devices read API
*/
func (a *Client) APIDcimDevicesRead(params *APIDcimDevicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/devices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesReadOK), nil

}

/*
APIDcimDevicesUpdate api dcim devices update API
*/
func (a *Client) APIDcimDevicesUpdate(params *APIDcimDevicesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimDevicesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimDevicesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_devices_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/devices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimDevicesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimDevicesUpdateOK), nil

}

/*
APIDcimFrontPortTemplatesCreate api dcim front port templates create API
*/
func (a *Client) APIDcimFrontPortTemplatesCreate(params *APIDcimFrontPortTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-port-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/front-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortTemplatesCreateCreated), nil

}

/*
APIDcimFrontPortTemplatesDelete api dcim front port templates delete API
*/
func (a *Client) APIDcimFrontPortTemplatesDelete(params *APIDcimFrontPortTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-port-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/front-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortTemplatesDeleteNoContent), nil

}

/*
APIDcimFrontPortTemplatesList api dcim front port templates list API
*/
func (a *Client) APIDcimFrontPortTemplatesList(params *APIDcimFrontPortTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-port-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/front-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortTemplatesListOK), nil

}

/*
APIDcimFrontPortTemplatesPartialUpdate api dcim front port templates partial update API
*/
func (a *Client) APIDcimFrontPortTemplatesPartialUpdate(params *APIDcimFrontPortTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-port-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/front-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortTemplatesPartialUpdateOK), nil

}

/*
APIDcimFrontPortTemplatesRead api dcim front port templates read API
*/
func (a *Client) APIDcimFrontPortTemplatesRead(params *APIDcimFrontPortTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-port-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/front-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortTemplatesReadOK), nil

}

/*
APIDcimFrontPortTemplatesUpdate api dcim front port templates update API
*/
func (a *Client) APIDcimFrontPortTemplatesUpdate(params *APIDcimFrontPortTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-port-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/front-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortTemplatesUpdateOK), nil

}

/*
APIDcimFrontPortsCreate api dcim front ports create API
*/
func (a *Client) APIDcimFrontPortsCreate(params *APIDcimFrontPortsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-ports_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/front-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortsCreateCreated), nil

}

/*
APIDcimFrontPortsDelete api dcim front ports delete API
*/
func (a *Client) APIDcimFrontPortsDelete(params *APIDcimFrontPortsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-ports_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/front-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortsDeleteNoContent), nil

}

/*
APIDcimFrontPortsList api dcim front ports list API
*/
func (a *Client) APIDcimFrontPortsList(params *APIDcimFrontPortsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-ports_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/front-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortsListOK), nil

}

/*
APIDcimFrontPortsPartialUpdate api dcim front ports partial update API
*/
func (a *Client) APIDcimFrontPortsPartialUpdate(params *APIDcimFrontPortsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-ports_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/front-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortsPartialUpdateOK), nil

}

/*
APIDcimFrontPortsRead api dcim front ports read API
*/
func (a *Client) APIDcimFrontPortsRead(params *APIDcimFrontPortsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-ports_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/front-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortsReadOK), nil

}

/*
APIDcimFrontPortsUpdate api dcim front ports update API
*/
func (a *Client) APIDcimFrontPortsUpdate(params *APIDcimFrontPortsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimFrontPortsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimFrontPortsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_front-ports_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/front-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimFrontPortsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimFrontPortsUpdateOK), nil

}

/*
APIDcimInterfaceConnectionsCreate api dcim interface connections create API
*/
func (a *Client) APIDcimInterfaceConnectionsCreate(params *APIDcimInterfaceConnectionsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceConnectionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceConnectionsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-connections_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/interface-connections/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceConnectionsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceConnectionsCreateCreated), nil

}

/*
APIDcimInterfaceConnectionsDelete api dcim interface connections delete API
*/
func (a *Client) APIDcimInterfaceConnectionsDelete(params *APIDcimInterfaceConnectionsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceConnectionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceConnectionsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-connections_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/interface-connections/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceConnectionsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceConnectionsDeleteNoContent), nil

}

/*
APIDcimInterfaceConnectionsList api dcim interface connections list API
*/
func (a *Client) APIDcimInterfaceConnectionsList(params *APIDcimInterfaceConnectionsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceConnectionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceConnectionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-connections_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/interface-connections/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceConnectionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceConnectionsListOK), nil

}

/*
APIDcimInterfaceConnectionsPartialUpdate api dcim interface connections partial update API
*/
func (a *Client) APIDcimInterfaceConnectionsPartialUpdate(params *APIDcimInterfaceConnectionsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceConnectionsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceConnectionsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-connections_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/interface-connections/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceConnectionsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceConnectionsPartialUpdateOK), nil

}

/*
APIDcimInterfaceConnectionsRead api dcim interface connections read API
*/
func (a *Client) APIDcimInterfaceConnectionsRead(params *APIDcimInterfaceConnectionsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceConnectionsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceConnectionsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-connections_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/interface-connections/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceConnectionsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceConnectionsReadOK), nil

}

/*
APIDcimInterfaceConnectionsUpdate api dcim interface connections update API
*/
func (a *Client) APIDcimInterfaceConnectionsUpdate(params *APIDcimInterfaceConnectionsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceConnectionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceConnectionsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-connections_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/interface-connections/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceConnectionsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceConnectionsUpdateOK), nil

}

/*
APIDcimInterfaceTemplatesCreate api dcim interface templates create API
*/
func (a *Client) APIDcimInterfaceTemplatesCreate(params *APIDcimInterfaceTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/interface-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceTemplatesCreateCreated), nil

}

/*
APIDcimInterfaceTemplatesDelete api dcim interface templates delete API
*/
func (a *Client) APIDcimInterfaceTemplatesDelete(params *APIDcimInterfaceTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/interface-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceTemplatesDeleteNoContent), nil

}

/*
APIDcimInterfaceTemplatesList api dcim interface templates list API
*/
func (a *Client) APIDcimInterfaceTemplatesList(params *APIDcimInterfaceTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/interface-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceTemplatesListOK), nil

}

/*
APIDcimInterfaceTemplatesPartialUpdate api dcim interface templates partial update API
*/
func (a *Client) APIDcimInterfaceTemplatesPartialUpdate(params *APIDcimInterfaceTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/interface-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceTemplatesPartialUpdateOK), nil

}

/*
APIDcimInterfaceTemplatesRead api dcim interface templates read API
*/
func (a *Client) APIDcimInterfaceTemplatesRead(params *APIDcimInterfaceTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/interface-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceTemplatesReadOK), nil

}

/*
APIDcimInterfaceTemplatesUpdate api dcim interface templates update API
*/
func (a *Client) APIDcimInterfaceTemplatesUpdate(params *APIDcimInterfaceTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfaceTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfaceTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interface-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/interface-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfaceTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfaceTemplatesUpdateOK), nil

}

/*
APIDcimInterfacesCreate api dcim interfaces create API
*/
func (a *Client) APIDcimInterfacesCreate(params *APIDcimInterfacesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/interfaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesCreateCreated), nil

}

/*
APIDcimInterfacesDelete api dcim interfaces delete API
*/
func (a *Client) APIDcimInterfacesDelete(params *APIDcimInterfacesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesDeleteNoContent), nil

}

/*
APIDcimInterfacesGraphs A convenience method for rendering graphs for a particular interface.
*/
func (a *Client) APIDcimInterfacesGraphs(params *APIDcimInterfacesGraphsParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesGraphsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesGraphsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_graphs",
		Method:             "GET",
		PathPattern:        "/api/dcim/interfaces/{id}/graphs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesGraphsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesGraphsOK), nil

}

/*
APIDcimInterfacesList api dcim interfaces list API
*/
func (a *Client) APIDcimInterfacesList(params *APIDcimInterfacesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/interfaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesListOK), nil

}

/*
APIDcimInterfacesPartialUpdate api dcim interfaces partial update API
*/
func (a *Client) APIDcimInterfacesPartialUpdate(params *APIDcimInterfacesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesPartialUpdateOK), nil

}

/*
APIDcimInterfacesRead api dcim interfaces read API
*/
func (a *Client) APIDcimInterfacesRead(params *APIDcimInterfacesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesReadOK), nil

}

/*
APIDcimInterfacesTrace Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
*/
func (a *Client) APIDcimInterfacesTrace(params *APIDcimInterfacesTraceParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesTraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_trace",
		Method:             "GET",
		PathPattern:        "/api/dcim/interfaces/{id}/trace/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesTraceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesTraceOK), nil

}

/*
APIDcimInterfacesUpdate api dcim interfaces update API
*/
func (a *Client) APIDcimInterfacesUpdate(params *APIDcimInterfacesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInterfacesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInterfacesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_interfaces_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInterfacesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInterfacesUpdateOK), nil

}

/*
APIDcimInventoryItemsCreate api dcim inventory items create API
*/
func (a *Client) APIDcimInventoryItemsCreate(params *APIDcimInventoryItemsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInventoryItemsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInventoryItemsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_inventory-items_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/inventory-items/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInventoryItemsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInventoryItemsCreateCreated), nil

}

/*
APIDcimInventoryItemsDelete api dcim inventory items delete API
*/
func (a *Client) APIDcimInventoryItemsDelete(params *APIDcimInventoryItemsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInventoryItemsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInventoryItemsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_inventory-items_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/inventory-items/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInventoryItemsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInventoryItemsDeleteNoContent), nil

}

/*
APIDcimInventoryItemsList api dcim inventory items list API
*/
func (a *Client) APIDcimInventoryItemsList(params *APIDcimInventoryItemsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInventoryItemsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInventoryItemsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_inventory-items_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/inventory-items/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInventoryItemsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInventoryItemsListOK), nil

}

/*
APIDcimInventoryItemsPartialUpdate api dcim inventory items partial update API
*/
func (a *Client) APIDcimInventoryItemsPartialUpdate(params *APIDcimInventoryItemsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInventoryItemsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInventoryItemsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_inventory-items_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/inventory-items/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInventoryItemsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInventoryItemsPartialUpdateOK), nil

}

/*
APIDcimInventoryItemsRead api dcim inventory items read API
*/
func (a *Client) APIDcimInventoryItemsRead(params *APIDcimInventoryItemsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInventoryItemsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInventoryItemsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_inventory-items_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/inventory-items/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInventoryItemsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInventoryItemsReadOK), nil

}

/*
APIDcimInventoryItemsUpdate api dcim inventory items update API
*/
func (a *Client) APIDcimInventoryItemsUpdate(params *APIDcimInventoryItemsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimInventoryItemsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimInventoryItemsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_inventory-items_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/inventory-items/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimInventoryItemsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimInventoryItemsUpdateOK), nil

}

/*
APIDcimManufacturersCreate api dcim manufacturers create API
*/
func (a *Client) APIDcimManufacturersCreate(params *APIDcimManufacturersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimManufacturersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimManufacturersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_manufacturers_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/manufacturers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimManufacturersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimManufacturersCreateCreated), nil

}

/*
APIDcimManufacturersDelete api dcim manufacturers delete API
*/
func (a *Client) APIDcimManufacturersDelete(params *APIDcimManufacturersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimManufacturersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimManufacturersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_manufacturers_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/manufacturers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimManufacturersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimManufacturersDeleteNoContent), nil

}

/*
APIDcimManufacturersList api dcim manufacturers list API
*/
func (a *Client) APIDcimManufacturersList(params *APIDcimManufacturersListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimManufacturersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimManufacturersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_manufacturers_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/manufacturers/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimManufacturersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimManufacturersListOK), nil

}

/*
APIDcimManufacturersPartialUpdate api dcim manufacturers partial update API
*/
func (a *Client) APIDcimManufacturersPartialUpdate(params *APIDcimManufacturersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimManufacturersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimManufacturersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_manufacturers_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/manufacturers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimManufacturersPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimManufacturersPartialUpdateOK), nil

}

/*
APIDcimManufacturersRead api dcim manufacturers read API
*/
func (a *Client) APIDcimManufacturersRead(params *APIDcimManufacturersReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimManufacturersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimManufacturersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_manufacturers_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/manufacturers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimManufacturersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimManufacturersReadOK), nil

}

/*
APIDcimManufacturersUpdate api dcim manufacturers update API
*/
func (a *Client) APIDcimManufacturersUpdate(params *APIDcimManufacturersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimManufacturersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimManufacturersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_manufacturers_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/manufacturers/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimManufacturersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimManufacturersUpdateOK), nil

}

/*
APIDcimPlatformsCreate api dcim platforms create API
*/
func (a *Client) APIDcimPlatformsCreate(params *APIDcimPlatformsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPlatformsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPlatformsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_platforms_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/platforms/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPlatformsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPlatformsCreateCreated), nil

}

/*
APIDcimPlatformsDelete api dcim platforms delete API
*/
func (a *Client) APIDcimPlatformsDelete(params *APIDcimPlatformsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPlatformsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPlatformsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_platforms_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/platforms/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPlatformsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPlatformsDeleteNoContent), nil

}

/*
APIDcimPlatformsList api dcim platforms list API
*/
func (a *Client) APIDcimPlatformsList(params *APIDcimPlatformsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPlatformsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPlatformsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_platforms_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/platforms/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPlatformsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPlatformsListOK), nil

}

/*
APIDcimPlatformsPartialUpdate api dcim platforms partial update API
*/
func (a *Client) APIDcimPlatformsPartialUpdate(params *APIDcimPlatformsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPlatformsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPlatformsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_platforms_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/platforms/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPlatformsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPlatformsPartialUpdateOK), nil

}

/*
APIDcimPlatformsRead api dcim platforms read API
*/
func (a *Client) APIDcimPlatformsRead(params *APIDcimPlatformsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPlatformsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPlatformsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_platforms_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/platforms/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPlatformsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPlatformsReadOK), nil

}

/*
APIDcimPlatformsUpdate api dcim platforms update API
*/
func (a *Client) APIDcimPlatformsUpdate(params *APIDcimPlatformsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPlatformsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPlatformsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_platforms_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/platforms/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPlatformsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPlatformsUpdateOK), nil

}

/*
APIDcimPowerConnectionsList api dcim power connections list API
*/
func (a *Client) APIDcimPowerConnectionsList(params *APIDcimPowerConnectionsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerConnectionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerConnectionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-connections_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-connections/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerConnectionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerConnectionsListOK), nil

}

/*
APIDcimPowerOutletTemplatesCreate api dcim power outlet templates create API
*/
func (a *Client) APIDcimPowerOutletTemplatesCreate(params *APIDcimPowerOutletTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlet-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/power-outlet-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletTemplatesCreateCreated), nil

}

/*
APIDcimPowerOutletTemplatesDelete api dcim power outlet templates delete API
*/
func (a *Client) APIDcimPowerOutletTemplatesDelete(params *APIDcimPowerOutletTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlet-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/power-outlet-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletTemplatesDeleteNoContent), nil

}

/*
APIDcimPowerOutletTemplatesList api dcim power outlet templates list API
*/
func (a *Client) APIDcimPowerOutletTemplatesList(params *APIDcimPowerOutletTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlet-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-outlet-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletTemplatesListOK), nil

}

/*
APIDcimPowerOutletTemplatesPartialUpdate api dcim power outlet templates partial update API
*/
func (a *Client) APIDcimPowerOutletTemplatesPartialUpdate(params *APIDcimPowerOutletTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlet-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/power-outlet-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletTemplatesPartialUpdateOK), nil

}

/*
APIDcimPowerOutletTemplatesRead api dcim power outlet templates read API
*/
func (a *Client) APIDcimPowerOutletTemplatesRead(params *APIDcimPowerOutletTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlet-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-outlet-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletTemplatesReadOK), nil

}

/*
APIDcimPowerOutletTemplatesUpdate api dcim power outlet templates update API
*/
func (a *Client) APIDcimPowerOutletTemplatesUpdate(params *APIDcimPowerOutletTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlet-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/power-outlet-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletTemplatesUpdateOK), nil

}

/*
APIDcimPowerOutletsCreate api dcim power outlets create API
*/
func (a *Client) APIDcimPowerOutletsCreate(params *APIDcimPowerOutletsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/power-outlets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsCreateCreated), nil

}

/*
APIDcimPowerOutletsDelete api dcim power outlets delete API
*/
func (a *Client) APIDcimPowerOutletsDelete(params *APIDcimPowerOutletsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/power-outlets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsDeleteNoContent), nil

}

/*
APIDcimPowerOutletsList api dcim power outlets list API
*/
func (a *Client) APIDcimPowerOutletsList(params *APIDcimPowerOutletsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-outlets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsListOK), nil

}

/*
APIDcimPowerOutletsPartialUpdate api dcim power outlets partial update API
*/
func (a *Client) APIDcimPowerOutletsPartialUpdate(params *APIDcimPowerOutletsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/power-outlets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsPartialUpdateOK), nil

}

/*
APIDcimPowerOutletsRead api dcim power outlets read API
*/
func (a *Client) APIDcimPowerOutletsRead(params *APIDcimPowerOutletsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-outlets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsReadOK), nil

}

/*
APIDcimPowerOutletsTrace Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
*/
func (a *Client) APIDcimPowerOutletsTrace(params *APIDcimPowerOutletsTraceParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsTraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_trace",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-outlets/{id}/trace/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsTraceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsTraceOK), nil

}

/*
APIDcimPowerOutletsUpdate api dcim power outlets update API
*/
func (a *Client) APIDcimPowerOutletsUpdate(params *APIDcimPowerOutletsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerOutletsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerOutletsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-outlets_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/power-outlets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerOutletsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerOutletsUpdateOK), nil

}

/*
APIDcimPowerPortTemplatesCreate api dcim power port templates create API
*/
func (a *Client) APIDcimPowerPortTemplatesCreate(params *APIDcimPowerPortTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-port-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/power-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortTemplatesCreateCreated), nil

}

/*
APIDcimPowerPortTemplatesDelete api dcim power port templates delete API
*/
func (a *Client) APIDcimPowerPortTemplatesDelete(params *APIDcimPowerPortTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-port-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/power-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortTemplatesDeleteNoContent), nil

}

/*
APIDcimPowerPortTemplatesList api dcim power port templates list API
*/
func (a *Client) APIDcimPowerPortTemplatesList(params *APIDcimPowerPortTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-port-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortTemplatesListOK), nil

}

/*
APIDcimPowerPortTemplatesPartialUpdate api dcim power port templates partial update API
*/
func (a *Client) APIDcimPowerPortTemplatesPartialUpdate(params *APIDcimPowerPortTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-port-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/power-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortTemplatesPartialUpdateOK), nil

}

/*
APIDcimPowerPortTemplatesRead api dcim power port templates read API
*/
func (a *Client) APIDcimPowerPortTemplatesRead(params *APIDcimPowerPortTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-port-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortTemplatesReadOK), nil

}

/*
APIDcimPowerPortTemplatesUpdate api dcim power port templates update API
*/
func (a *Client) APIDcimPowerPortTemplatesUpdate(params *APIDcimPowerPortTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-port-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/power-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortTemplatesUpdateOK), nil

}

/*
APIDcimPowerPortsCreate api dcim power ports create API
*/
func (a *Client) APIDcimPowerPortsCreate(params *APIDcimPowerPortsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/power-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsCreateCreated), nil

}

/*
APIDcimPowerPortsDelete api dcim power ports delete API
*/
func (a *Client) APIDcimPowerPortsDelete(params *APIDcimPowerPortsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/power-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsDeleteNoContent), nil

}

/*
APIDcimPowerPortsList api dcim power ports list API
*/
func (a *Client) APIDcimPowerPortsList(params *APIDcimPowerPortsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsListOK), nil

}

/*
APIDcimPowerPortsPartialUpdate api dcim power ports partial update API
*/
func (a *Client) APIDcimPowerPortsPartialUpdate(params *APIDcimPowerPortsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/power-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsPartialUpdateOK), nil

}

/*
APIDcimPowerPortsRead api dcim power ports read API
*/
func (a *Client) APIDcimPowerPortsRead(params *APIDcimPowerPortsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsReadOK), nil

}

/*
APIDcimPowerPortsTrace Trace a complete cable path and return each segment as a three-tuple of (termination, cable, termination).
*/
func (a *Client) APIDcimPowerPortsTrace(params *APIDcimPowerPortsTraceParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsTraceOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsTraceParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_trace",
		Method:             "GET",
		PathPattern:        "/api/dcim/power-ports/{id}/trace/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsTraceReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsTraceOK), nil

}

/*
APIDcimPowerPortsUpdate api dcim power ports update API
*/
func (a *Client) APIDcimPowerPortsUpdate(params *APIDcimPowerPortsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimPowerPortsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimPowerPortsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_power-ports_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/power-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimPowerPortsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimPowerPortsUpdateOK), nil

}

/*
APIDcimRackGroupsCreate api dcim rack groups create API
*/
func (a *Client) APIDcimRackGroupsCreate(params *APIDcimRackGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackGroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackGroupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-groups_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/rack-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackGroupsCreateCreated), nil

}

/*
APIDcimRackGroupsDelete api dcim rack groups delete API
*/
func (a *Client) APIDcimRackGroupsDelete(params *APIDcimRackGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-groups_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/rack-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackGroupsDeleteNoContent), nil

}

/*
APIDcimRackGroupsList api dcim rack groups list API
*/
func (a *Client) APIDcimRackGroupsList(params *APIDcimRackGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-groups_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/rack-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackGroupsListOK), nil

}

/*
APIDcimRackGroupsPartialUpdate api dcim rack groups partial update API
*/
func (a *Client) APIDcimRackGroupsPartialUpdate(params *APIDcimRackGroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackGroupsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackGroupsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-groups_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/rack-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackGroupsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackGroupsPartialUpdateOK), nil

}

/*
APIDcimRackGroupsRead api dcim rack groups read API
*/
func (a *Client) APIDcimRackGroupsRead(params *APIDcimRackGroupsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-groups_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/rack-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackGroupsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackGroupsReadOK), nil

}

/*
APIDcimRackGroupsUpdate api dcim rack groups update API
*/
func (a *Client) APIDcimRackGroupsUpdate(params *APIDcimRackGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackGroupsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-groups_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/rack-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackGroupsUpdateOK), nil

}

/*
APIDcimRackReservationsCreate api dcim rack reservations create API
*/
func (a *Client) APIDcimRackReservationsCreate(params *APIDcimRackReservationsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackReservationsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackReservationsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-reservations_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/rack-reservations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackReservationsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackReservationsCreateCreated), nil

}

/*
APIDcimRackReservationsDelete api dcim rack reservations delete API
*/
func (a *Client) APIDcimRackReservationsDelete(params *APIDcimRackReservationsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackReservationsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackReservationsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-reservations_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/rack-reservations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackReservationsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackReservationsDeleteNoContent), nil

}

/*
APIDcimRackReservationsList api dcim rack reservations list API
*/
func (a *Client) APIDcimRackReservationsList(params *APIDcimRackReservationsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackReservationsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackReservationsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-reservations_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/rack-reservations/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackReservationsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackReservationsListOK), nil

}

/*
APIDcimRackReservationsPartialUpdate api dcim rack reservations partial update API
*/
func (a *Client) APIDcimRackReservationsPartialUpdate(params *APIDcimRackReservationsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackReservationsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackReservationsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-reservations_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/rack-reservations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackReservationsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackReservationsPartialUpdateOK), nil

}

/*
APIDcimRackReservationsRead api dcim rack reservations read API
*/
func (a *Client) APIDcimRackReservationsRead(params *APIDcimRackReservationsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackReservationsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackReservationsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-reservations_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/rack-reservations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackReservationsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackReservationsReadOK), nil

}

/*
APIDcimRackReservationsUpdate api dcim rack reservations update API
*/
func (a *Client) APIDcimRackReservationsUpdate(params *APIDcimRackReservationsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackReservationsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackReservationsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-reservations_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/rack-reservations/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackReservationsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackReservationsUpdateOK), nil

}

/*
APIDcimRackRolesCreate api dcim rack roles create API
*/
func (a *Client) APIDcimRackRolesCreate(params *APIDcimRackRolesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackRolesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackRolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-roles_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/rack-roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackRolesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackRolesCreateCreated), nil

}

/*
APIDcimRackRolesDelete api dcim rack roles delete API
*/
func (a *Client) APIDcimRackRolesDelete(params *APIDcimRackRolesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackRolesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackRolesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-roles_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/rack-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackRolesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackRolesDeleteNoContent), nil

}

/*
APIDcimRackRolesList api dcim rack roles list API
*/
func (a *Client) APIDcimRackRolesList(params *APIDcimRackRolesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-roles_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/rack-roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackRolesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackRolesListOK), nil

}

/*
APIDcimRackRolesPartialUpdate api dcim rack roles partial update API
*/
func (a *Client) APIDcimRackRolesPartialUpdate(params *APIDcimRackRolesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackRolesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackRolesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-roles_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/rack-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackRolesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackRolesPartialUpdateOK), nil

}

/*
APIDcimRackRolesRead api dcim rack roles read API
*/
func (a *Client) APIDcimRackRolesRead(params *APIDcimRackRolesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackRolesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackRolesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-roles_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/rack-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackRolesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackRolesReadOK), nil

}

/*
APIDcimRackRolesUpdate api dcim rack roles update API
*/
func (a *Client) APIDcimRackRolesUpdate(params *APIDcimRackRolesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRackRolesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRackRolesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rack-roles_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/rack-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRackRolesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRackRolesUpdateOK), nil

}

/*
APIDcimRacksCreate api dcim racks create API
*/
func (a *Client) APIDcimRacksCreate(params *APIDcimRacksCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/racks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksCreateCreated), nil

}

/*
APIDcimRacksDelete api dcim racks delete API
*/
func (a *Client) APIDcimRacksDelete(params *APIDcimRacksDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/racks/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksDeleteNoContent), nil

}

/*
APIDcimRacksList api dcim racks list API
*/
func (a *Client) APIDcimRacksList(params *APIDcimRacksListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/racks/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksListOK), nil

}

/*
APIDcimRacksPartialUpdate api dcim racks partial update API
*/
func (a *Client) APIDcimRacksPartialUpdate(params *APIDcimRacksPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/racks/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksPartialUpdateOK), nil

}

/*
APIDcimRacksRead api dcim racks read API
*/
func (a *Client) APIDcimRacksRead(params *APIDcimRacksReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/racks/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksReadOK), nil

}

/*
APIDcimRacksUnits List rack units (by rack)
*/
func (a *Client) APIDcimRacksUnits(params *APIDcimRacksUnitsParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksUnitsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksUnitsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_units",
		Method:             "GET",
		PathPattern:        "/api/dcim/racks/{id}/units/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksUnitsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksUnitsOK), nil

}

/*
APIDcimRacksUpdate api dcim racks update API
*/
func (a *Client) APIDcimRacksUpdate(params *APIDcimRacksUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRacksUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRacksUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_racks_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/racks/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRacksUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRacksUpdateOK), nil

}

/*
APIDcimRearPortTemplatesCreate api dcim rear port templates create API
*/
func (a *Client) APIDcimRearPortTemplatesCreate(params *APIDcimRearPortTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-port-templates_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/rear-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortTemplatesCreateCreated), nil

}

/*
APIDcimRearPortTemplatesDelete api dcim rear port templates delete API
*/
func (a *Client) APIDcimRearPortTemplatesDelete(params *APIDcimRearPortTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-port-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/rear-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortTemplatesDeleteNoContent), nil

}

/*
APIDcimRearPortTemplatesList api dcim rear port templates list API
*/
func (a *Client) APIDcimRearPortTemplatesList(params *APIDcimRearPortTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-port-templates_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/rear-port-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortTemplatesListOK), nil

}

/*
APIDcimRearPortTemplatesPartialUpdate api dcim rear port templates partial update API
*/
func (a *Client) APIDcimRearPortTemplatesPartialUpdate(params *APIDcimRearPortTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-port-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/rear-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortTemplatesPartialUpdateOK), nil

}

/*
APIDcimRearPortTemplatesRead api dcim rear port templates read API
*/
func (a *Client) APIDcimRearPortTemplatesRead(params *APIDcimRearPortTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-port-templates_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/rear-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortTemplatesReadOK), nil

}

/*
APIDcimRearPortTemplatesUpdate api dcim rear port templates update API
*/
func (a *Client) APIDcimRearPortTemplatesUpdate(params *APIDcimRearPortTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-port-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/rear-port-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortTemplatesUpdateOK), nil

}

/*
APIDcimRearPortsCreate api dcim rear ports create API
*/
func (a *Client) APIDcimRearPortsCreate(params *APIDcimRearPortsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-ports_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/rear-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortsCreateCreated), nil

}

/*
APIDcimRearPortsDelete api dcim rear ports delete API
*/
func (a *Client) APIDcimRearPortsDelete(params *APIDcimRearPortsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-ports_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/rear-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortsDeleteNoContent), nil

}

/*
APIDcimRearPortsList api dcim rear ports list API
*/
func (a *Client) APIDcimRearPortsList(params *APIDcimRearPortsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-ports_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/rear-ports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortsListOK), nil

}

/*
APIDcimRearPortsPartialUpdate api dcim rear ports partial update API
*/
func (a *Client) APIDcimRearPortsPartialUpdate(params *APIDcimRearPortsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-ports_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/rear-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortsPartialUpdateOK), nil

}

/*
APIDcimRearPortsRead api dcim rear ports read API
*/
func (a *Client) APIDcimRearPortsRead(params *APIDcimRearPortsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-ports_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/rear-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortsReadOK), nil

}

/*
APIDcimRearPortsUpdate api dcim rear ports update API
*/
func (a *Client) APIDcimRearPortsUpdate(params *APIDcimRearPortsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRearPortsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRearPortsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_rear-ports_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/rear-ports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRearPortsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRearPortsUpdateOK), nil

}

/*
APIDcimRegionsCreate api dcim regions create API
*/
func (a *Client) APIDcimRegionsCreate(params *APIDcimRegionsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRegionsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRegionsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_regions_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/regions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRegionsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRegionsCreateCreated), nil

}

/*
APIDcimRegionsDelete api dcim regions delete API
*/
func (a *Client) APIDcimRegionsDelete(params *APIDcimRegionsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRegionsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRegionsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_regions_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/regions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRegionsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRegionsDeleteNoContent), nil

}

/*
APIDcimRegionsList api dcim regions list API
*/
func (a *Client) APIDcimRegionsList(params *APIDcimRegionsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRegionsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRegionsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_regions_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/regions/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRegionsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRegionsListOK), nil

}

/*
APIDcimRegionsPartialUpdate api dcim regions partial update API
*/
func (a *Client) APIDcimRegionsPartialUpdate(params *APIDcimRegionsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRegionsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRegionsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_regions_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/regions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRegionsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRegionsPartialUpdateOK), nil

}

/*
APIDcimRegionsRead api dcim regions read API
*/
func (a *Client) APIDcimRegionsRead(params *APIDcimRegionsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRegionsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRegionsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_regions_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/regions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRegionsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRegionsReadOK), nil

}

/*
APIDcimRegionsUpdate api dcim regions update API
*/
func (a *Client) APIDcimRegionsUpdate(params *APIDcimRegionsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimRegionsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimRegionsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_regions_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/regions/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimRegionsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimRegionsUpdateOK), nil

}

/*
APIDcimSitesCreate api dcim sites create API
*/
func (a *Client) APIDcimSitesCreate(params *APIDcimSitesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/sites/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesCreateCreated), nil

}

/*
APIDcimSitesDelete api dcim sites delete API
*/
func (a *Client) APIDcimSitesDelete(params *APIDcimSitesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/sites/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesDeleteNoContent), nil

}

/*
APIDcimSitesGraphs A convenience method for rendering graphs for a particular site.
*/
func (a *Client) APIDcimSitesGraphs(params *APIDcimSitesGraphsParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesGraphsOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesGraphsParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_graphs",
		Method:             "GET",
		PathPattern:        "/api/dcim/sites/{id}/graphs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesGraphsReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesGraphsOK), nil

}

/*
APIDcimSitesList api dcim sites list API
*/
func (a *Client) APIDcimSitesList(params *APIDcimSitesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/sites/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesListOK), nil

}

/*
APIDcimSitesPartialUpdate api dcim sites partial update API
*/
func (a *Client) APIDcimSitesPartialUpdate(params *APIDcimSitesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/sites/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesPartialUpdateOK), nil

}

/*
APIDcimSitesRead api dcim sites read API
*/
func (a *Client) APIDcimSitesRead(params *APIDcimSitesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/sites/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesReadOK), nil

}

/*
APIDcimSitesUpdate api dcim sites update API
*/
func (a *Client) APIDcimSitesUpdate(params *APIDcimSitesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimSitesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimSitesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_sites_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/sites/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimSitesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimSitesUpdateOK), nil

}

/*
APIDcimVirtualChassisCreate api dcim virtual chassis create API
*/
func (a *Client) APIDcimVirtualChassisCreate(params *APIDcimVirtualChassisCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimVirtualChassisCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimVirtualChassisCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_virtual-chassis_create",
		Method:             "POST",
		PathPattern:        "/api/dcim/virtual-chassis/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimVirtualChassisCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimVirtualChassisCreateCreated), nil

}

/*
APIDcimVirtualChassisDelete api dcim virtual chassis delete API
*/
func (a *Client) APIDcimVirtualChassisDelete(params *APIDcimVirtualChassisDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimVirtualChassisDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimVirtualChassisDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_virtual-chassis_delete",
		Method:             "DELETE",
		PathPattern:        "/api/dcim/virtual-chassis/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimVirtualChassisDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimVirtualChassisDeleteNoContent), nil

}

/*
APIDcimVirtualChassisList api dcim virtual chassis list API
*/
func (a *Client) APIDcimVirtualChassisList(params *APIDcimVirtualChassisListParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimVirtualChassisListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimVirtualChassisListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_virtual-chassis_list",
		Method:             "GET",
		PathPattern:        "/api/dcim/virtual-chassis/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimVirtualChassisListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimVirtualChassisListOK), nil

}

/*
APIDcimVirtualChassisPartialUpdate api dcim virtual chassis partial update API
*/
func (a *Client) APIDcimVirtualChassisPartialUpdate(params *APIDcimVirtualChassisPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimVirtualChassisPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimVirtualChassisPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_virtual-chassis_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/dcim/virtual-chassis/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimVirtualChassisPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimVirtualChassisPartialUpdateOK), nil

}

/*
APIDcimVirtualChassisRead api dcim virtual chassis read API
*/
func (a *Client) APIDcimVirtualChassisRead(params *APIDcimVirtualChassisReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimVirtualChassisReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimVirtualChassisReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_virtual-chassis_read",
		Method:             "GET",
		PathPattern:        "/api/dcim/virtual-chassis/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimVirtualChassisReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimVirtualChassisReadOK), nil

}

/*
APIDcimVirtualChassisUpdate api dcim virtual chassis update API
*/
func (a *Client) APIDcimVirtualChassisUpdate(params *APIDcimVirtualChassisUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIDcimVirtualChassisUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIDcimVirtualChassisUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_dcim_virtual-chassis_update",
		Method:             "PUT",
		PathPattern:        "/api/dcim/virtual-chassis/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIDcimVirtualChassisUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIDcimVirtualChassisUpdateOK), nil

}

/*
APIExtrasChoicesList api extras choices list API
*/
func (a *Client) APIExtrasChoicesList(params *APIExtrasChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras__choices_list",
		Method:             "GET",
		PathPattern:        "/api/extras/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasChoicesListOK), nil

}

/*
APIExtrasChoicesRead api extras choices read API
*/
func (a *Client) APIExtrasChoicesRead(params *APIExtrasChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras__choices_read",
		Method:             "GET",
		PathPattern:        "/api/extras/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasChoicesReadOK), nil

}

/*
APIExtrasConfigContextsCreate api extras config contexts create API
*/
func (a *Client) APIExtrasConfigContextsCreate(params *APIExtrasConfigContextsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasConfigContextsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasConfigContextsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_config-contexts_create",
		Method:             "POST",
		PathPattern:        "/api/extras/config-contexts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasConfigContextsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasConfigContextsCreateCreated), nil

}

/*
APIExtrasConfigContextsDelete api extras config contexts delete API
*/
func (a *Client) APIExtrasConfigContextsDelete(params *APIExtrasConfigContextsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasConfigContextsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasConfigContextsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_config-contexts_delete",
		Method:             "DELETE",
		PathPattern:        "/api/extras/config-contexts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasConfigContextsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasConfigContextsDeleteNoContent), nil

}

/*
APIExtrasConfigContextsList api extras config contexts list API
*/
func (a *Client) APIExtrasConfigContextsList(params *APIExtrasConfigContextsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasConfigContextsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasConfigContextsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_config-contexts_list",
		Method:             "GET",
		PathPattern:        "/api/extras/config-contexts/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasConfigContextsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasConfigContextsListOK), nil

}

/*
APIExtrasConfigContextsPartialUpdate api extras config contexts partial update API
*/
func (a *Client) APIExtrasConfigContextsPartialUpdate(params *APIExtrasConfigContextsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasConfigContextsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasConfigContextsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_config-contexts_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/extras/config-contexts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasConfigContextsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasConfigContextsPartialUpdateOK), nil

}

/*
APIExtrasConfigContextsRead api extras config contexts read API
*/
func (a *Client) APIExtrasConfigContextsRead(params *APIExtrasConfigContextsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasConfigContextsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasConfigContextsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_config-contexts_read",
		Method:             "GET",
		PathPattern:        "/api/extras/config-contexts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasConfigContextsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasConfigContextsReadOK), nil

}

/*
APIExtrasConfigContextsUpdate api extras config contexts update API
*/
func (a *Client) APIExtrasConfigContextsUpdate(params *APIExtrasConfigContextsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasConfigContextsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasConfigContextsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_config-contexts_update",
		Method:             "PUT",
		PathPattern:        "/api/extras/config-contexts/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasConfigContextsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasConfigContextsUpdateOK), nil

}

/*
APIExtrasExportTemplatesCreate api extras export templates create API
*/
func (a *Client) APIExtrasExportTemplatesCreate(params *APIExtrasExportTemplatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasExportTemplatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasExportTemplatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_export-templates_create",
		Method:             "POST",
		PathPattern:        "/api/extras/export-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasExportTemplatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasExportTemplatesCreateCreated), nil

}

/*
APIExtrasExportTemplatesDelete api extras export templates delete API
*/
func (a *Client) APIExtrasExportTemplatesDelete(params *APIExtrasExportTemplatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasExportTemplatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasExportTemplatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_export-templates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/extras/export-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasExportTemplatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasExportTemplatesDeleteNoContent), nil

}

/*
APIExtrasExportTemplatesList api extras export templates list API
*/
func (a *Client) APIExtrasExportTemplatesList(params *APIExtrasExportTemplatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasExportTemplatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasExportTemplatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_export-templates_list",
		Method:             "GET",
		PathPattern:        "/api/extras/export-templates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasExportTemplatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasExportTemplatesListOK), nil

}

/*
APIExtrasExportTemplatesPartialUpdate api extras export templates partial update API
*/
func (a *Client) APIExtrasExportTemplatesPartialUpdate(params *APIExtrasExportTemplatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasExportTemplatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasExportTemplatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_export-templates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/extras/export-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasExportTemplatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasExportTemplatesPartialUpdateOK), nil

}

/*
APIExtrasExportTemplatesRead api extras export templates read API
*/
func (a *Client) APIExtrasExportTemplatesRead(params *APIExtrasExportTemplatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasExportTemplatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasExportTemplatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_export-templates_read",
		Method:             "GET",
		PathPattern:        "/api/extras/export-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasExportTemplatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasExportTemplatesReadOK), nil

}

/*
APIExtrasExportTemplatesUpdate api extras export templates update API
*/
func (a *Client) APIExtrasExportTemplatesUpdate(params *APIExtrasExportTemplatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasExportTemplatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasExportTemplatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_export-templates_update",
		Method:             "PUT",
		PathPattern:        "/api/extras/export-templates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasExportTemplatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasExportTemplatesUpdateOK), nil

}

/*
APIExtrasGraphsCreate api extras graphs create API
*/
func (a *Client) APIExtrasGraphsCreate(params *APIExtrasGraphsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasGraphsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasGraphsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_graphs_create",
		Method:             "POST",
		PathPattern:        "/api/extras/graphs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasGraphsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasGraphsCreateCreated), nil

}

/*
APIExtrasGraphsDelete api extras graphs delete API
*/
func (a *Client) APIExtrasGraphsDelete(params *APIExtrasGraphsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasGraphsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasGraphsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_graphs_delete",
		Method:             "DELETE",
		PathPattern:        "/api/extras/graphs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasGraphsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasGraphsDeleteNoContent), nil

}

/*
APIExtrasGraphsList api extras graphs list API
*/
func (a *Client) APIExtrasGraphsList(params *APIExtrasGraphsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasGraphsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasGraphsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_graphs_list",
		Method:             "GET",
		PathPattern:        "/api/extras/graphs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasGraphsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasGraphsListOK), nil

}

/*
APIExtrasGraphsPartialUpdate api extras graphs partial update API
*/
func (a *Client) APIExtrasGraphsPartialUpdate(params *APIExtrasGraphsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasGraphsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasGraphsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_graphs_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/extras/graphs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasGraphsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasGraphsPartialUpdateOK), nil

}

/*
APIExtrasGraphsRead api extras graphs read API
*/
func (a *Client) APIExtrasGraphsRead(params *APIExtrasGraphsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasGraphsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasGraphsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_graphs_read",
		Method:             "GET",
		PathPattern:        "/api/extras/graphs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasGraphsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasGraphsReadOK), nil

}

/*
APIExtrasGraphsUpdate api extras graphs update API
*/
func (a *Client) APIExtrasGraphsUpdate(params *APIExtrasGraphsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasGraphsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasGraphsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_graphs_update",
		Method:             "PUT",
		PathPattern:        "/api/extras/graphs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasGraphsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasGraphsUpdateOK), nil

}

/*
APIExtrasImageAttachmentsCreate api extras image attachments create API
*/
func (a *Client) APIExtrasImageAttachmentsCreate(params *APIExtrasImageAttachmentsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasImageAttachmentsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasImageAttachmentsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_image-attachments_create",
		Method:             "POST",
		PathPattern:        "/api/extras/image-attachments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasImageAttachmentsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasImageAttachmentsCreateCreated), nil

}

/*
APIExtrasImageAttachmentsDelete api extras image attachments delete API
*/
func (a *Client) APIExtrasImageAttachmentsDelete(params *APIExtrasImageAttachmentsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasImageAttachmentsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasImageAttachmentsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_image-attachments_delete",
		Method:             "DELETE",
		PathPattern:        "/api/extras/image-attachments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasImageAttachmentsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasImageAttachmentsDeleteNoContent), nil

}

/*
APIExtrasImageAttachmentsList api extras image attachments list API
*/
func (a *Client) APIExtrasImageAttachmentsList(params *APIExtrasImageAttachmentsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasImageAttachmentsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasImageAttachmentsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_image-attachments_list",
		Method:             "GET",
		PathPattern:        "/api/extras/image-attachments/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasImageAttachmentsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasImageAttachmentsListOK), nil

}

/*
APIExtrasImageAttachmentsPartialUpdate api extras image attachments partial update API
*/
func (a *Client) APIExtrasImageAttachmentsPartialUpdate(params *APIExtrasImageAttachmentsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasImageAttachmentsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasImageAttachmentsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_image-attachments_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/extras/image-attachments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasImageAttachmentsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasImageAttachmentsPartialUpdateOK), nil

}

/*
APIExtrasImageAttachmentsRead api extras image attachments read API
*/
func (a *Client) APIExtrasImageAttachmentsRead(params *APIExtrasImageAttachmentsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasImageAttachmentsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasImageAttachmentsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_image-attachments_read",
		Method:             "GET",
		PathPattern:        "/api/extras/image-attachments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasImageAttachmentsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasImageAttachmentsReadOK), nil

}

/*
APIExtrasImageAttachmentsUpdate api extras image attachments update API
*/
func (a *Client) APIExtrasImageAttachmentsUpdate(params *APIExtrasImageAttachmentsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasImageAttachmentsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasImageAttachmentsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_image-attachments_update",
		Method:             "PUT",
		PathPattern:        "/api/extras/image-attachments/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasImageAttachmentsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasImageAttachmentsUpdateOK), nil

}

/*
APIExtrasObjectChangesList Retrieve a list of recent changes.
*/
func (a *Client) APIExtrasObjectChangesList(params *APIExtrasObjectChangesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasObjectChangesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasObjectChangesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_object-changes_list",
		Method:             "GET",
		PathPattern:        "/api/extras/object-changes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasObjectChangesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasObjectChangesListOK), nil

}

/*
APIExtrasObjectChangesRead Retrieve a list of recent changes.
*/
func (a *Client) APIExtrasObjectChangesRead(params *APIExtrasObjectChangesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasObjectChangesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasObjectChangesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_object-changes_read",
		Method:             "GET",
		PathPattern:        "/api/extras/object-changes/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasObjectChangesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasObjectChangesReadOK), nil

}

/*
APIExtrasReportsList Compile all reports and their related results (if any). Result data is deferred in the list view.
*/
func (a *Client) APIExtrasReportsList(params *APIExtrasReportsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasReportsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasReportsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_reports_list",
		Method:             "GET",
		PathPattern:        "/api/extras/reports/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasReportsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasReportsListOK), nil

}

/*
APIExtrasReportsRead Retrieve a single Report identified as "<module>.<report>".
*/
func (a *Client) APIExtrasReportsRead(params *APIExtrasReportsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasReportsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasReportsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_reports_read",
		Method:             "GET",
		PathPattern:        "/api/extras/reports/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasReportsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasReportsReadOK), nil

}

/*
APIExtrasReportsRun Run a Report and create a new ReportResult, overwriting any previous result for the Report.
*/
func (a *Client) APIExtrasReportsRun(params *APIExtrasReportsRunParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasReportsRunCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasReportsRunParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_reports_run",
		Method:             "POST",
		PathPattern:        "/api/extras/reports/{id}/run/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasReportsRunReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasReportsRunCreated), nil

}

/*
APIExtrasTagsCreate api extras tags create API
*/
func (a *Client) APIExtrasTagsCreate(params *APIExtrasTagsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTagsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTagsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_tags_create",
		Method:             "POST",
		PathPattern:        "/api/extras/tags/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTagsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTagsCreateCreated), nil

}

/*
APIExtrasTagsDelete api extras tags delete API
*/
func (a *Client) APIExtrasTagsDelete(params *APIExtrasTagsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTagsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTagsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_tags_delete",
		Method:             "DELETE",
		PathPattern:        "/api/extras/tags/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTagsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTagsDeleteNoContent), nil

}

/*
APIExtrasTagsList api extras tags list API
*/
func (a *Client) APIExtrasTagsList(params *APIExtrasTagsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTagsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTagsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_tags_list",
		Method:             "GET",
		PathPattern:        "/api/extras/tags/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTagsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTagsListOK), nil

}

/*
APIExtrasTagsPartialUpdate api extras tags partial update API
*/
func (a *Client) APIExtrasTagsPartialUpdate(params *APIExtrasTagsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTagsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTagsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_tags_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/extras/tags/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTagsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTagsPartialUpdateOK), nil

}

/*
APIExtrasTagsRead api extras tags read API
*/
func (a *Client) APIExtrasTagsRead(params *APIExtrasTagsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTagsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTagsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_tags_read",
		Method:             "GET",
		PathPattern:        "/api/extras/tags/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTagsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTagsReadOK), nil

}

/*
APIExtrasTagsUpdate api extras tags update API
*/
func (a *Client) APIExtrasTagsUpdate(params *APIExtrasTagsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTagsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTagsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_tags_update",
		Method:             "PUT",
		PathPattern:        "/api/extras/tags/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTagsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTagsUpdateOK), nil

}

/*
APIExtrasTopologyMapsCreate api extras topology maps create API
*/
func (a *Client) APIExtrasTopologyMapsCreate(params *APIExtrasTopologyMapsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_create",
		Method:             "POST",
		PathPattern:        "/api/extras/topology-maps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsCreateCreated), nil

}

/*
APIExtrasTopologyMapsDelete api extras topology maps delete API
*/
func (a *Client) APIExtrasTopologyMapsDelete(params *APIExtrasTopologyMapsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_delete",
		Method:             "DELETE",
		PathPattern:        "/api/extras/topology-maps/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsDeleteNoContent), nil

}

/*
APIExtrasTopologyMapsList api extras topology maps list API
*/
func (a *Client) APIExtrasTopologyMapsList(params *APIExtrasTopologyMapsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_list",
		Method:             "GET",
		PathPattern:        "/api/extras/topology-maps/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsListOK), nil

}

/*
APIExtrasTopologyMapsPartialUpdate api extras topology maps partial update API
*/
func (a *Client) APIExtrasTopologyMapsPartialUpdate(params *APIExtrasTopologyMapsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/extras/topology-maps/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsPartialUpdateOK), nil

}

/*
APIExtrasTopologyMapsRead api extras topology maps read API
*/
func (a *Client) APIExtrasTopologyMapsRead(params *APIExtrasTopologyMapsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_read",
		Method:             "GET",
		PathPattern:        "/api/extras/topology-maps/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsReadOK), nil

}

/*
APIExtrasTopologyMapsRender api extras topology maps render API
*/
func (a *Client) APIExtrasTopologyMapsRender(params *APIExtrasTopologyMapsRenderParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsRenderOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsRenderParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_render",
		Method:             "GET",
		PathPattern:        "/api/extras/topology-maps/{id}/render/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsRenderReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsRenderOK), nil

}

/*
APIExtrasTopologyMapsUpdate api extras topology maps update API
*/
func (a *Client) APIExtrasTopologyMapsUpdate(params *APIExtrasTopologyMapsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIExtrasTopologyMapsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIExtrasTopologyMapsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_extras_topology-maps_update",
		Method:             "PUT",
		PathPattern:        "/api/extras/topology-maps/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIExtrasTopologyMapsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIExtrasTopologyMapsUpdateOK), nil

}

/*
APIIPAMChoicesList api ipam choices list API
*/
func (a *Client) APIIPAMChoicesList(params *APIIPAMChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam__choices_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMChoicesListOK), nil

}

/*
APIIPAMChoicesRead api ipam choices read API
*/
func (a *Client) APIIPAMChoicesRead(params *APIIPAMChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam__choices_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMChoicesReadOK), nil

}

/*
APIIPAMAggregatesCreate api ipam aggregates create API
*/
func (a *Client) APIIPAMAggregatesCreate(params *APIIPAMAggregatesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMAggregatesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMAggregatesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_aggregates_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/aggregates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMAggregatesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMAggregatesCreateCreated), nil

}

/*
APIIPAMAggregatesDelete api ipam aggregates delete API
*/
func (a *Client) APIIPAMAggregatesDelete(params *APIIPAMAggregatesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMAggregatesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMAggregatesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_aggregates_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/aggregates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMAggregatesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMAggregatesDeleteNoContent), nil

}

/*
APIIPAMAggregatesList api ipam aggregates list API
*/
func (a *Client) APIIPAMAggregatesList(params *APIIPAMAggregatesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMAggregatesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMAggregatesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_aggregates_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/aggregates/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMAggregatesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMAggregatesListOK), nil

}

/*
APIIPAMAggregatesPartialUpdate api ipam aggregates partial update API
*/
func (a *Client) APIIPAMAggregatesPartialUpdate(params *APIIPAMAggregatesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMAggregatesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMAggregatesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_aggregates_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/aggregates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMAggregatesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMAggregatesPartialUpdateOK), nil

}

/*
APIIPAMAggregatesRead api ipam aggregates read API
*/
func (a *Client) APIIPAMAggregatesRead(params *APIIPAMAggregatesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMAggregatesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMAggregatesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_aggregates_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/aggregates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMAggregatesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMAggregatesReadOK), nil

}

/*
APIIPAMAggregatesUpdate api ipam aggregates update API
*/
func (a *Client) APIIPAMAggregatesUpdate(params *APIIPAMAggregatesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMAggregatesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMAggregatesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_aggregates_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/aggregates/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMAggregatesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMAggregatesUpdateOK), nil

}

/*
APIIPAMIPAddressesCreate api ipam ip addresses create API
*/
func (a *Client) APIIPAMIPAddressesCreate(params *APIIPAMIPAddressesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMIPAddressesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMIPAddressesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_ip-addresses_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/ip-addresses/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMIPAddressesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMIPAddressesCreateCreated), nil

}

/*
APIIPAMIPAddressesDelete api ipam ip addresses delete API
*/
func (a *Client) APIIPAMIPAddressesDelete(params *APIIPAMIPAddressesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMIPAddressesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMIPAddressesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_ip-addresses_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/ip-addresses/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMIPAddressesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMIPAddressesDeleteNoContent), nil

}

/*
APIIPAMIPAddressesList api ipam ip addresses list API
*/
func (a *Client) APIIPAMIPAddressesList(params *APIIPAMIPAddressesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMIPAddressesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMIPAddressesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_ip-addresses_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/ip-addresses/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMIPAddressesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMIPAddressesListOK), nil

}

/*
APIIPAMIPAddressesPartialUpdate api ipam ip addresses partial update API
*/
func (a *Client) APIIPAMIPAddressesPartialUpdate(params *APIIPAMIPAddressesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMIPAddressesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMIPAddressesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_ip-addresses_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/ip-addresses/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMIPAddressesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMIPAddressesPartialUpdateOK), nil

}

/*
APIIPAMIPAddressesRead api ipam ip addresses read API
*/
func (a *Client) APIIPAMIPAddressesRead(params *APIIPAMIPAddressesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMIPAddressesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMIPAddressesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_ip-addresses_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/ip-addresses/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMIPAddressesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMIPAddressesReadOK), nil

}

/*
APIIPAMIPAddressesUpdate api ipam ip addresses update API
*/
func (a *Client) APIIPAMIPAddressesUpdate(params *APIIPAMIPAddressesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMIPAddressesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMIPAddressesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_ip-addresses_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/ip-addresses/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMIPAddressesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMIPAddressesUpdateOK), nil

}

/*
APIIPAMPrefixesAvailableIpsCreate A convenience method for returning available IP addresses within a prefix. By default, the number of IPs
returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed,
however results will not be paginated.
*/
func (a *Client) APIIPAMPrefixesAvailableIpsCreate(params *APIIPAMPrefixesAvailableIpsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesAvailableIpsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesAvailableIpsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_available-ips_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/prefixes/{id}/available-ips/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesAvailableIpsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesAvailableIpsCreateCreated), nil

}

/*
APIIPAMPrefixesAvailableIpsRead A convenience method for returning available IP addresses within a prefix. By default, the number of IPs
returned will be equivalent to PAGINATE_COUNT. An arbitrary limit (up to MAX_PAGE_SIZE, if set) may be passed,
however results will not be paginated.
*/
func (a *Client) APIIPAMPrefixesAvailableIpsRead(params *APIIPAMPrefixesAvailableIpsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesAvailableIpsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesAvailableIpsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_available-ips_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/prefixes/{id}/available-ips/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesAvailableIpsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesAvailableIpsReadOK), nil

}

/*
APIIPAMPrefixesAvailablePrefixesCreate A convenience method for returning available child prefixes within a parent.
*/
func (a *Client) APIIPAMPrefixesAvailablePrefixesCreate(params *APIIPAMPrefixesAvailablePrefixesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesAvailablePrefixesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesAvailablePrefixesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_available-prefixes_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/prefixes/{id}/available-prefixes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesAvailablePrefixesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesAvailablePrefixesCreateCreated), nil

}

/*
APIIPAMPrefixesAvailablePrefixesRead A convenience method for returning available child prefixes within a parent.
*/
func (a *Client) APIIPAMPrefixesAvailablePrefixesRead(params *APIIPAMPrefixesAvailablePrefixesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesAvailablePrefixesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesAvailablePrefixesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_available-prefixes_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/prefixes/{id}/available-prefixes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesAvailablePrefixesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesAvailablePrefixesReadOK), nil

}

/*
APIIPAMPrefixesCreate api ipam prefixes create API
*/
func (a *Client) APIIPAMPrefixesCreate(params *APIIPAMPrefixesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/prefixes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesCreateCreated), nil

}

/*
APIIPAMPrefixesDelete api ipam prefixes delete API
*/
func (a *Client) APIIPAMPrefixesDelete(params *APIIPAMPrefixesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/prefixes/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesDeleteNoContent), nil

}

/*
APIIPAMPrefixesList api ipam prefixes list API
*/
func (a *Client) APIIPAMPrefixesList(params *APIIPAMPrefixesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/prefixes/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesListOK), nil

}

/*
APIIPAMPrefixesPartialUpdate api ipam prefixes partial update API
*/
func (a *Client) APIIPAMPrefixesPartialUpdate(params *APIIPAMPrefixesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/prefixes/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesPartialUpdateOK), nil

}

/*
APIIPAMPrefixesRead api ipam prefixes read API
*/
func (a *Client) APIIPAMPrefixesRead(params *APIIPAMPrefixesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/prefixes/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesReadOK), nil

}

/*
APIIPAMPrefixesUpdate api ipam prefixes update API
*/
func (a *Client) APIIPAMPrefixesUpdate(params *APIIPAMPrefixesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMPrefixesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMPrefixesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_prefixes_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/prefixes/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMPrefixesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMPrefixesUpdateOK), nil

}

/*
APIIPAMRirsCreate api ipam rirs create API
*/
func (a *Client) APIIPAMRirsCreate(params *APIIPAMRirsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRirsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRirsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_rirs_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/rirs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRirsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRirsCreateCreated), nil

}

/*
APIIPAMRirsDelete api ipam rirs delete API
*/
func (a *Client) APIIPAMRirsDelete(params *APIIPAMRirsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRirsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRirsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_rirs_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/rirs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRirsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRirsDeleteNoContent), nil

}

/*
APIIPAMRirsList api ipam rirs list API
*/
func (a *Client) APIIPAMRirsList(params *APIIPAMRirsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRirsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRirsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_rirs_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/rirs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRirsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRirsListOK), nil

}

/*
APIIPAMRirsPartialUpdate api ipam rirs partial update API
*/
func (a *Client) APIIPAMRirsPartialUpdate(params *APIIPAMRirsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRirsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRirsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_rirs_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/rirs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRirsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRirsPartialUpdateOK), nil

}

/*
APIIPAMRirsRead api ipam rirs read API
*/
func (a *Client) APIIPAMRirsRead(params *APIIPAMRirsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRirsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRirsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_rirs_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/rirs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRirsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRirsReadOK), nil

}

/*
APIIPAMRirsUpdate api ipam rirs update API
*/
func (a *Client) APIIPAMRirsUpdate(params *APIIPAMRirsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRirsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRirsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_rirs_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/rirs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRirsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRirsUpdateOK), nil

}

/*
APIIPAMRolesCreate api ipam roles create API
*/
func (a *Client) APIIPAMRolesCreate(params *APIIPAMRolesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRolesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_roles_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRolesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRolesCreateCreated), nil

}

/*
APIIPAMRolesDelete api ipam roles delete API
*/
func (a *Client) APIIPAMRolesDelete(params *APIIPAMRolesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRolesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRolesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_roles_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRolesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRolesDeleteNoContent), nil

}

/*
APIIPAMRolesList api ipam roles list API
*/
func (a *Client) APIIPAMRolesList(params *APIIPAMRolesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_roles_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRolesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRolesListOK), nil

}

/*
APIIPAMRolesPartialUpdate api ipam roles partial update API
*/
func (a *Client) APIIPAMRolesPartialUpdate(params *APIIPAMRolesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRolesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRolesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_roles_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRolesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRolesPartialUpdateOK), nil

}

/*
APIIPAMRolesRead api ipam roles read API
*/
func (a *Client) APIIPAMRolesRead(params *APIIPAMRolesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRolesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRolesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_roles_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRolesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRolesReadOK), nil

}

/*
APIIPAMRolesUpdate api ipam roles update API
*/
func (a *Client) APIIPAMRolesUpdate(params *APIIPAMRolesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMRolesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMRolesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_roles_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMRolesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMRolesUpdateOK), nil

}

/*
APIIPAMServicesCreate api ipam services create API
*/
func (a *Client) APIIPAMServicesCreate(params *APIIPAMServicesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMServicesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMServicesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_services_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMServicesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMServicesCreateCreated), nil

}

/*
APIIPAMServicesDelete api ipam services delete API
*/
func (a *Client) APIIPAMServicesDelete(params *APIIPAMServicesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMServicesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMServicesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_services_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/services/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMServicesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMServicesDeleteNoContent), nil

}

/*
APIIPAMServicesList api ipam services list API
*/
func (a *Client) APIIPAMServicesList(params *APIIPAMServicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMServicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMServicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_services_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/services/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMServicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMServicesListOK), nil

}

/*
APIIPAMServicesPartialUpdate api ipam services partial update API
*/
func (a *Client) APIIPAMServicesPartialUpdate(params *APIIPAMServicesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMServicesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMServicesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_services_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/services/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMServicesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMServicesPartialUpdateOK), nil

}

/*
APIIPAMServicesRead api ipam services read API
*/
func (a *Client) APIIPAMServicesRead(params *APIIPAMServicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMServicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMServicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_services_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/services/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMServicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMServicesReadOK), nil

}

/*
APIIPAMServicesUpdate api ipam services update API
*/
func (a *Client) APIIPAMServicesUpdate(params *APIIPAMServicesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMServicesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMServicesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_services_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/services/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMServicesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMServicesUpdateOK), nil

}

/*
APIIPAMVlanGroupsCreate api ipam vlan groups create API
*/
func (a *Client) APIIPAMVlanGroupsCreate(params *APIIPAMVlanGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlanGroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlanGroupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlan-groups_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/vlan-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlanGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlanGroupsCreateCreated), nil

}

/*
APIIPAMVlanGroupsDelete api ipam vlan groups delete API
*/
func (a *Client) APIIPAMVlanGroupsDelete(params *APIIPAMVlanGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlanGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlanGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlan-groups_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/vlan-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlanGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlanGroupsDeleteNoContent), nil

}

/*
APIIPAMVlanGroupsList api ipam vlan groups list API
*/
func (a *Client) APIIPAMVlanGroupsList(params *APIIPAMVlanGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlanGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlanGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlan-groups_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/vlan-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlanGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlanGroupsListOK), nil

}

/*
APIIPAMVlanGroupsPartialUpdate api ipam vlan groups partial update API
*/
func (a *Client) APIIPAMVlanGroupsPartialUpdate(params *APIIPAMVlanGroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlanGroupsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlanGroupsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlan-groups_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/vlan-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlanGroupsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlanGroupsPartialUpdateOK), nil

}

/*
APIIPAMVlanGroupsRead api ipam vlan groups read API
*/
func (a *Client) APIIPAMVlanGroupsRead(params *APIIPAMVlanGroupsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlanGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlanGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlan-groups_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/vlan-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlanGroupsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlanGroupsReadOK), nil

}

/*
APIIPAMVlanGroupsUpdate api ipam vlan groups update API
*/
func (a *Client) APIIPAMVlanGroupsUpdate(params *APIIPAMVlanGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlanGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlanGroupsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlan-groups_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/vlan-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlanGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlanGroupsUpdateOK), nil

}

/*
APIIPAMVlansCreate api ipam vlans create API
*/
func (a *Client) APIIPAMVlansCreate(params *APIIPAMVlansCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlansCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlansCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlans_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/vlans/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlansCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlansCreateCreated), nil

}

/*
APIIPAMVlansDelete api ipam vlans delete API
*/
func (a *Client) APIIPAMVlansDelete(params *APIIPAMVlansDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlansDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlansDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlans_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlansDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlansDeleteNoContent), nil

}

/*
APIIPAMVlansList api ipam vlans list API
*/
func (a *Client) APIIPAMVlansList(params *APIIPAMVlansListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlansListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlansListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlans_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/vlans/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlansListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlansListOK), nil

}

/*
APIIPAMVlansPartialUpdate api ipam vlans partial update API
*/
func (a *Client) APIIPAMVlansPartialUpdate(params *APIIPAMVlansPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlansPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlansPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlans_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlansPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlansPartialUpdateOK), nil

}

/*
APIIPAMVlansRead api ipam vlans read API
*/
func (a *Client) APIIPAMVlansRead(params *APIIPAMVlansReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlansReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlansReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlans_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlansReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlansReadOK), nil

}

/*
APIIPAMVlansUpdate api ipam vlans update API
*/
func (a *Client) APIIPAMVlansUpdate(params *APIIPAMVlansUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVlansUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVlansUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vlans_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/vlans/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVlansUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVlansUpdateOK), nil

}

/*
APIIPAMVrfsCreate api ipam vrfs create API
*/
func (a *Client) APIIPAMVrfsCreate(params *APIIPAMVrfsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVrfsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVrfsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vrfs_create",
		Method:             "POST",
		PathPattern:        "/api/ipam/vrfs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVrfsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVrfsCreateCreated), nil

}

/*
APIIPAMVrfsDelete api ipam vrfs delete API
*/
func (a *Client) APIIPAMVrfsDelete(params *APIIPAMVrfsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVrfsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVrfsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vrfs_delete",
		Method:             "DELETE",
		PathPattern:        "/api/ipam/vrfs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVrfsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVrfsDeleteNoContent), nil

}

/*
APIIPAMVrfsList api ipam vrfs list API
*/
func (a *Client) APIIPAMVrfsList(params *APIIPAMVrfsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVrfsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVrfsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vrfs_list",
		Method:             "GET",
		PathPattern:        "/api/ipam/vrfs/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVrfsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVrfsListOK), nil

}

/*
APIIPAMVrfsPartialUpdate api ipam vrfs partial update API
*/
func (a *Client) APIIPAMVrfsPartialUpdate(params *APIIPAMVrfsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVrfsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVrfsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vrfs_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/ipam/vrfs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVrfsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVrfsPartialUpdateOK), nil

}

/*
APIIPAMVrfsRead api ipam vrfs read API
*/
func (a *Client) APIIPAMVrfsRead(params *APIIPAMVrfsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVrfsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVrfsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vrfs_read",
		Method:             "GET",
		PathPattern:        "/api/ipam/vrfs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVrfsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVrfsReadOK), nil

}

/*
APIIPAMVrfsUpdate api ipam vrfs update API
*/
func (a *Client) APIIPAMVrfsUpdate(params *APIIPAMVrfsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIIPAMVrfsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIIPAMVrfsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_ipam_vrfs_update",
		Method:             "PUT",
		PathPattern:        "/api/ipam/vrfs/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIIPAMVrfsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIIPAMVrfsUpdateOK), nil

}

/*
APIList api list API
*/
func (a *Client) APIList(params *APIListParams, authInfo runtime.ClientAuthInfoWriter) (*APIListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_list",
		Method:             "GET",
		PathPattern:        "/api/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIListOK), nil

}

/*
APISecretsChoicesList api secrets choices list API
*/
func (a *Client) APISecretsChoicesList(params *APISecretsChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets__choices_list",
		Method:             "GET",
		PathPattern:        "/api/secrets/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsChoicesListOK), nil

}

/*
APISecretsChoicesRead api secrets choices read API
*/
func (a *Client) APISecretsChoicesRead(params *APISecretsChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets__choices_read",
		Method:             "GET",
		PathPattern:        "/api/secrets/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsChoicesReadOK), nil

}

/*
APISecretsGenerateRsaKeyPairList this endpoint can be used to generate a new r s a key pair the keys are returned in p e m format

    {
        "public_key": "<public key>",
        "private_key": "<private key>"
    }
*/
func (a *Client) APISecretsGenerateRsaKeyPairList(params *APISecretsGenerateRsaKeyPairListParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsGenerateRsaKeyPairListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsGenerateRsaKeyPairListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_generate-rsa-key-pair_list",
		Method:             "GET",
		PathPattern:        "/api/secrets/generate-rsa-key-pair/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsGenerateRsaKeyPairListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsGenerateRsaKeyPairListOK), nil

}

/*
APISecretsGetSessionKeyCreate Retrieve a temporary session key to use for encrypting and decrypting secrets via the API. The user's private RSA
key is POSTed with the name `private_key`. An example:

    curl -v -X POST -H "Authorization: Token <token>" -H "Accept: application/json; indent=4" \
    --data-urlencode "private_key@<filename>" https://netbox/api/secrets/get-session-key/

This request will yield a base64-encoded session key to be included in an `X-Session-Key` header in future requests:

    {
        "session_key": "+8t4SI6XikgVmB5+/urhozx9O5qCQANyOk1MNe6taRf="
    }

This endpoint accepts one optional parameter: `preserve_key`. If True and a session key exists, the existing session
key will be returned instead of a new one.
*/
func (a *Client) APISecretsGetSessionKeyCreate(params *APISecretsGetSessionKeyCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsGetSessionKeyCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsGetSessionKeyCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_get-session-key_create",
		Method:             "POST",
		PathPattern:        "/api/secrets/get-session-key/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsGetSessionKeyCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsGetSessionKeyCreateCreated), nil

}

/*
APISecretsSecretRolesCreate api secrets secret roles create API
*/
func (a *Client) APISecretsSecretRolesCreate(params *APISecretsSecretRolesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretRolesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretRolesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secret-roles_create",
		Method:             "POST",
		PathPattern:        "/api/secrets/secret-roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretRolesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretRolesCreateCreated), nil

}

/*
APISecretsSecretRolesDelete api secrets secret roles delete API
*/
func (a *Client) APISecretsSecretRolesDelete(params *APISecretsSecretRolesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretRolesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretRolesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secret-roles_delete",
		Method:             "DELETE",
		PathPattern:        "/api/secrets/secret-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretRolesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretRolesDeleteNoContent), nil

}

/*
APISecretsSecretRolesList api secrets secret roles list API
*/
func (a *Client) APISecretsSecretRolesList(params *APISecretsSecretRolesListParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretRolesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretRolesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secret-roles_list",
		Method:             "GET",
		PathPattern:        "/api/secrets/secret-roles/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretRolesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretRolesListOK), nil

}

/*
APISecretsSecretRolesPartialUpdate api secrets secret roles partial update API
*/
func (a *Client) APISecretsSecretRolesPartialUpdate(params *APISecretsSecretRolesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretRolesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretRolesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secret-roles_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/secrets/secret-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretRolesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretRolesPartialUpdateOK), nil

}

/*
APISecretsSecretRolesRead api secrets secret roles read API
*/
func (a *Client) APISecretsSecretRolesRead(params *APISecretsSecretRolesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretRolesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretRolesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secret-roles_read",
		Method:             "GET",
		PathPattern:        "/api/secrets/secret-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretRolesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretRolesReadOK), nil

}

/*
APISecretsSecretRolesUpdate api secrets secret roles update API
*/
func (a *Client) APISecretsSecretRolesUpdate(params *APISecretsSecretRolesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretRolesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretRolesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secret-roles_update",
		Method:             "PUT",
		PathPattern:        "/api/secrets/secret-roles/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretRolesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretRolesUpdateOK), nil

}

/*
APISecretsSecretsCreate api secrets secrets create API
*/
func (a *Client) APISecretsSecretsCreate(params *APISecretsSecretsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secrets_create",
		Method:             "POST",
		PathPattern:        "/api/secrets/secrets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretsCreateCreated), nil

}

/*
APISecretsSecretsDelete api secrets secrets delete API
*/
func (a *Client) APISecretsSecretsDelete(params *APISecretsSecretsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secrets_delete",
		Method:             "DELETE",
		PathPattern:        "/api/secrets/secrets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretsDeleteNoContent), nil

}

/*
APISecretsSecretsList api secrets secrets list API
*/
func (a *Client) APISecretsSecretsList(params *APISecretsSecretsListParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secrets_list",
		Method:             "GET",
		PathPattern:        "/api/secrets/secrets/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretsListOK), nil

}

/*
APISecretsSecretsPartialUpdate api secrets secrets partial update API
*/
func (a *Client) APISecretsSecretsPartialUpdate(params *APISecretsSecretsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secrets_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/secrets/secrets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretsPartialUpdateOK), nil

}

/*
APISecretsSecretsRead api secrets secrets read API
*/
func (a *Client) APISecretsSecretsRead(params *APISecretsSecretsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secrets_read",
		Method:             "GET",
		PathPattern:        "/api/secrets/secrets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretsReadOK), nil

}

/*
APISecretsSecretsUpdate api secrets secrets update API
*/
func (a *Client) APISecretsSecretsUpdate(params *APISecretsSecretsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APISecretsSecretsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPISecretsSecretsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_secrets_secrets_update",
		Method:             "PUT",
		PathPattern:        "/api/secrets/secrets/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APISecretsSecretsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APISecretsSecretsUpdateOK), nil

}

/*
APITenancyChoicesList api tenancy choices list API
*/
func (a *Client) APITenancyChoicesList(params *APITenancyChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy__choices_list",
		Method:             "GET",
		PathPattern:        "/api/tenancy/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyChoicesListOK), nil

}

/*
APITenancyChoicesRead api tenancy choices read API
*/
func (a *Client) APITenancyChoicesRead(params *APITenancyChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy__choices_read",
		Method:             "GET",
		PathPattern:        "/api/tenancy/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyChoicesReadOK), nil

}

/*
APITenancyTenantGroupsCreate api tenancy tenant groups create API
*/
func (a *Client) APITenancyTenantGroupsCreate(params *APITenancyTenantGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantGroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantGroupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenant-groups_create",
		Method:             "POST",
		PathPattern:        "/api/tenancy/tenant-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantGroupsCreateCreated), nil

}

/*
APITenancyTenantGroupsDelete api tenancy tenant groups delete API
*/
func (a *Client) APITenancyTenantGroupsDelete(params *APITenancyTenantGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenant-groups_delete",
		Method:             "DELETE",
		PathPattern:        "/api/tenancy/tenant-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantGroupsDeleteNoContent), nil

}

/*
APITenancyTenantGroupsList api tenancy tenant groups list API
*/
func (a *Client) APITenancyTenantGroupsList(params *APITenancyTenantGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenant-groups_list",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenant-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantGroupsListOK), nil

}

/*
APITenancyTenantGroupsPartialUpdate api tenancy tenant groups partial update API
*/
func (a *Client) APITenancyTenantGroupsPartialUpdate(params *APITenancyTenantGroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantGroupsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantGroupsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenant-groups_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/tenancy/tenant-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantGroupsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantGroupsPartialUpdateOK), nil

}

/*
APITenancyTenantGroupsRead api tenancy tenant groups read API
*/
func (a *Client) APITenancyTenantGroupsRead(params *APITenancyTenantGroupsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenant-groups_read",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenant-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantGroupsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantGroupsReadOK), nil

}

/*
APITenancyTenantGroupsUpdate api tenancy tenant groups update API
*/
func (a *Client) APITenancyTenantGroupsUpdate(params *APITenancyTenantGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantGroupsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenant-groups_update",
		Method:             "PUT",
		PathPattern:        "/api/tenancy/tenant-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantGroupsUpdateOK), nil

}

/*
APITenancyTenantsCreate api tenancy tenants create API
*/
func (a *Client) APITenancyTenantsCreate(params *APITenancyTenantsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenants_create",
		Method:             "POST",
		PathPattern:        "/api/tenancy/tenants/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantsCreateCreated), nil

}

/*
APITenancyTenantsDelete api tenancy tenants delete API
*/
func (a *Client) APITenancyTenantsDelete(params *APITenancyTenantsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenants_delete",
		Method:             "DELETE",
		PathPattern:        "/api/tenancy/tenants/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantsDeleteNoContent), nil

}

/*
APITenancyTenantsList api tenancy tenants list API
*/
func (a *Client) APITenancyTenantsList(params *APITenancyTenantsListParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenants_list",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenants/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantsListOK), nil

}

/*
APITenancyTenantsPartialUpdate api tenancy tenants partial update API
*/
func (a *Client) APITenancyTenantsPartialUpdate(params *APITenancyTenantsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenants_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/tenancy/tenants/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantsPartialUpdateOK), nil

}

/*
APITenancyTenantsRead api tenancy tenants read API
*/
func (a *Client) APITenancyTenantsRead(params *APITenancyTenantsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenants_read",
		Method:             "GET",
		PathPattern:        "/api/tenancy/tenants/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantsReadOK), nil

}

/*
APITenancyTenantsUpdate api tenancy tenants update API
*/
func (a *Client) APITenancyTenantsUpdate(params *APITenancyTenantsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APITenancyTenantsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPITenancyTenantsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_tenancy_tenants_update",
		Method:             "PUT",
		PathPattern:        "/api/tenancy/tenants/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APITenancyTenantsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APITenancyTenantsUpdateOK), nil

}

/*
APIVirtualizationChoicesList api virtualization choices list API
*/
func (a *Client) APIVirtualizationChoicesList(params *APIVirtualizationChoicesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationChoicesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationChoicesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization__choices_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/_choices/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationChoicesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationChoicesListOK), nil

}

/*
APIVirtualizationChoicesRead api virtualization choices read API
*/
func (a *Client) APIVirtualizationChoicesRead(params *APIVirtualizationChoicesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationChoicesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationChoicesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization__choices_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/_choices/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationChoicesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationChoicesReadOK), nil

}

/*
APIVirtualizationClusterGroupsCreate api virtualization cluster groups create API
*/
func (a *Client) APIVirtualizationClusterGroupsCreate(params *APIVirtualizationClusterGroupsCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterGroupsCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterGroupsCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-groups_create",
		Method:             "POST",
		PathPattern:        "/api/virtualization/cluster-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterGroupsCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterGroupsCreateCreated), nil

}

/*
APIVirtualizationClusterGroupsDelete api virtualization cluster groups delete API
*/
func (a *Client) APIVirtualizationClusterGroupsDelete(params *APIVirtualizationClusterGroupsDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterGroupsDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterGroupsDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-groups_delete",
		Method:             "DELETE",
		PathPattern:        "/api/virtualization/cluster-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterGroupsDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterGroupsDeleteNoContent), nil

}

/*
APIVirtualizationClusterGroupsList api virtualization cluster groups list API
*/
func (a *Client) APIVirtualizationClusterGroupsList(params *APIVirtualizationClusterGroupsListParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterGroupsListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterGroupsListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-groups_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-groups/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterGroupsListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterGroupsListOK), nil

}

/*
APIVirtualizationClusterGroupsPartialUpdate api virtualization cluster groups partial update API
*/
func (a *Client) APIVirtualizationClusterGroupsPartialUpdate(params *APIVirtualizationClusterGroupsPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterGroupsPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterGroupsPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-groups_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/virtualization/cluster-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterGroupsPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterGroupsPartialUpdateOK), nil

}

/*
APIVirtualizationClusterGroupsRead api virtualization cluster groups read API
*/
func (a *Client) APIVirtualizationClusterGroupsRead(params *APIVirtualizationClusterGroupsReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterGroupsReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterGroupsReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-groups_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterGroupsReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterGroupsReadOK), nil

}

/*
APIVirtualizationClusterGroupsUpdate api virtualization cluster groups update API
*/
func (a *Client) APIVirtualizationClusterGroupsUpdate(params *APIVirtualizationClusterGroupsUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterGroupsUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterGroupsUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-groups_update",
		Method:             "PUT",
		PathPattern:        "/api/virtualization/cluster-groups/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterGroupsUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterGroupsUpdateOK), nil

}

/*
APIVirtualizationClusterTypesCreate api virtualization cluster types create API
*/
func (a *Client) APIVirtualizationClusterTypesCreate(params *APIVirtualizationClusterTypesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterTypesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterTypesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-types_create",
		Method:             "POST",
		PathPattern:        "/api/virtualization/cluster-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterTypesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterTypesCreateCreated), nil

}

/*
APIVirtualizationClusterTypesDelete api virtualization cluster types delete API
*/
func (a *Client) APIVirtualizationClusterTypesDelete(params *APIVirtualizationClusterTypesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterTypesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterTypesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-types_delete",
		Method:             "DELETE",
		PathPattern:        "/api/virtualization/cluster-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterTypesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterTypesDeleteNoContent), nil

}

/*
APIVirtualizationClusterTypesList api virtualization cluster types list API
*/
func (a *Client) APIVirtualizationClusterTypesList(params *APIVirtualizationClusterTypesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterTypesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterTypesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-types_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-types/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterTypesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterTypesListOK), nil

}

/*
APIVirtualizationClusterTypesPartialUpdate api virtualization cluster types partial update API
*/
func (a *Client) APIVirtualizationClusterTypesPartialUpdate(params *APIVirtualizationClusterTypesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterTypesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterTypesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-types_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/virtualization/cluster-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterTypesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterTypesPartialUpdateOK), nil

}

/*
APIVirtualizationClusterTypesRead api virtualization cluster types read API
*/
func (a *Client) APIVirtualizationClusterTypesRead(params *APIVirtualizationClusterTypesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterTypesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterTypesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-types_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/cluster-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterTypesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterTypesReadOK), nil

}

/*
APIVirtualizationClusterTypesUpdate api virtualization cluster types update API
*/
func (a *Client) APIVirtualizationClusterTypesUpdate(params *APIVirtualizationClusterTypesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClusterTypesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClusterTypesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_cluster-types_update",
		Method:             "PUT",
		PathPattern:        "/api/virtualization/cluster-types/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClusterTypesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClusterTypesUpdateOK), nil

}

/*
APIVirtualizationClustersCreate api virtualization clusters create API
*/
func (a *Client) APIVirtualizationClustersCreate(params *APIVirtualizationClustersCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClustersCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClustersCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_clusters_create",
		Method:             "POST",
		PathPattern:        "/api/virtualization/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClustersCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClustersCreateCreated), nil

}

/*
APIVirtualizationClustersDelete api virtualization clusters delete API
*/
func (a *Client) APIVirtualizationClustersDelete(params *APIVirtualizationClustersDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClustersDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClustersDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_clusters_delete",
		Method:             "DELETE",
		PathPattern:        "/api/virtualization/clusters/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClustersDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClustersDeleteNoContent), nil

}

/*
APIVirtualizationClustersList api virtualization clusters list API
*/
func (a *Client) APIVirtualizationClustersList(params *APIVirtualizationClustersListParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClustersListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClustersListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_clusters_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/clusters/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClustersListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClustersListOK), nil

}

/*
APIVirtualizationClustersPartialUpdate api virtualization clusters partial update API
*/
func (a *Client) APIVirtualizationClustersPartialUpdate(params *APIVirtualizationClustersPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClustersPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClustersPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_clusters_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/virtualization/clusters/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClustersPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClustersPartialUpdateOK), nil

}

/*
APIVirtualizationClustersRead api virtualization clusters read API
*/
func (a *Client) APIVirtualizationClustersRead(params *APIVirtualizationClustersReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClustersReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClustersReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_clusters_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/clusters/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClustersReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClustersReadOK), nil

}

/*
APIVirtualizationClustersUpdate api virtualization clusters update API
*/
func (a *Client) APIVirtualizationClustersUpdate(params *APIVirtualizationClustersUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationClustersUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationClustersUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_clusters_update",
		Method:             "PUT",
		PathPattern:        "/api/virtualization/clusters/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationClustersUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationClustersUpdateOK), nil

}

/*
APIVirtualizationInterfacesCreate api virtualization interfaces create API
*/
func (a *Client) APIVirtualizationInterfacesCreate(params *APIVirtualizationInterfacesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationInterfacesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationInterfacesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_interfaces_create",
		Method:             "POST",
		PathPattern:        "/api/virtualization/interfaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationInterfacesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationInterfacesCreateCreated), nil

}

/*
APIVirtualizationInterfacesDelete api virtualization interfaces delete API
*/
func (a *Client) APIVirtualizationInterfacesDelete(params *APIVirtualizationInterfacesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationInterfacesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationInterfacesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_interfaces_delete",
		Method:             "DELETE",
		PathPattern:        "/api/virtualization/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationInterfacesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationInterfacesDeleteNoContent), nil

}

/*
APIVirtualizationInterfacesList api virtualization interfaces list API
*/
func (a *Client) APIVirtualizationInterfacesList(params *APIVirtualizationInterfacesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationInterfacesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationInterfacesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_interfaces_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/interfaces/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationInterfacesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationInterfacesListOK), nil

}

/*
APIVirtualizationInterfacesPartialUpdate api virtualization interfaces partial update API
*/
func (a *Client) APIVirtualizationInterfacesPartialUpdate(params *APIVirtualizationInterfacesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationInterfacesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationInterfacesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_interfaces_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/virtualization/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationInterfacesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationInterfacesPartialUpdateOK), nil

}

/*
APIVirtualizationInterfacesRead api virtualization interfaces read API
*/
func (a *Client) APIVirtualizationInterfacesRead(params *APIVirtualizationInterfacesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationInterfacesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationInterfacesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_interfaces_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationInterfacesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationInterfacesReadOK), nil

}

/*
APIVirtualizationInterfacesUpdate api virtualization interfaces update API
*/
func (a *Client) APIVirtualizationInterfacesUpdate(params *APIVirtualizationInterfacesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationInterfacesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationInterfacesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_interfaces_update",
		Method:             "PUT",
		PathPattern:        "/api/virtualization/interfaces/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationInterfacesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationInterfacesUpdateOK), nil

}

/*
APIVirtualizationVirtualMachinesCreate api virtualization virtual machines create API
*/
func (a *Client) APIVirtualizationVirtualMachinesCreate(params *APIVirtualizationVirtualMachinesCreateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationVirtualMachinesCreateCreated, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationVirtualMachinesCreateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_virtual-machines_create",
		Method:             "POST",
		PathPattern:        "/api/virtualization/virtual-machines/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationVirtualMachinesCreateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationVirtualMachinesCreateCreated), nil

}

/*
APIVirtualizationVirtualMachinesDelete api virtualization virtual machines delete API
*/
func (a *Client) APIVirtualizationVirtualMachinesDelete(params *APIVirtualizationVirtualMachinesDeleteParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationVirtualMachinesDeleteNoContent, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationVirtualMachinesDeleteParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_virtual-machines_delete",
		Method:             "DELETE",
		PathPattern:        "/api/virtualization/virtual-machines/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationVirtualMachinesDeleteReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationVirtualMachinesDeleteNoContent), nil

}

/*
APIVirtualizationVirtualMachinesList api virtualization virtual machines list API
*/
func (a *Client) APIVirtualizationVirtualMachinesList(params *APIVirtualizationVirtualMachinesListParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationVirtualMachinesListOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationVirtualMachinesListParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_virtual-machines_list",
		Method:             "GET",
		PathPattern:        "/api/virtualization/virtual-machines/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationVirtualMachinesListReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationVirtualMachinesListOK), nil

}

/*
APIVirtualizationVirtualMachinesPartialUpdate api virtualization virtual machines partial update API
*/
func (a *Client) APIVirtualizationVirtualMachinesPartialUpdate(params *APIVirtualizationVirtualMachinesPartialUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationVirtualMachinesPartialUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationVirtualMachinesPartialUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_virtual-machines_partial_update",
		Method:             "PATCH",
		PathPattern:        "/api/virtualization/virtual-machines/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationVirtualMachinesPartialUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationVirtualMachinesPartialUpdateOK), nil

}

/*
APIVirtualizationVirtualMachinesRead api virtualization virtual machines read API
*/
func (a *Client) APIVirtualizationVirtualMachinesRead(params *APIVirtualizationVirtualMachinesReadParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationVirtualMachinesReadOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationVirtualMachinesReadParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_virtual-machines_read",
		Method:             "GET",
		PathPattern:        "/api/virtualization/virtual-machines/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationVirtualMachinesReadReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationVirtualMachinesReadOK), nil

}

/*
APIVirtualizationVirtualMachinesUpdate api virtualization virtual machines update API
*/
func (a *Client) APIVirtualizationVirtualMachinesUpdate(params *APIVirtualizationVirtualMachinesUpdateParams, authInfo runtime.ClientAuthInfoWriter) (*APIVirtualizationVirtualMachinesUpdateOK, error) {
	// TODO: Validate the params before sending
	if params == nil {
		params = NewAPIVirtualizationVirtualMachinesUpdateParams()
	}

	result, err := a.transport.Submit(&runtime.ClientOperation{
		ID:                 "api_virtualization_virtual-machines_update",
		Method:             "PUT",
		PathPattern:        "/api/virtualization/virtual-machines/{id}/",
		ProducesMediaTypes: []string{"application/json"},
		ConsumesMediaTypes: []string{"application/json"},
		Schemes:            []string{"http"},
		Params:             params,
		Reader:             &APIVirtualizationVirtualMachinesUpdateReader{formats: a.formats},
		AuthInfo:           authInfo,
		Context:            params.Context,
		Client:             params.HTTPClient,
	})
	if err != nil {
		return nil, err
	}
	return result.(*APIVirtualizationVirtualMachinesUpdateOK), nil

}

// SetTransport changes the transport on the client
func (a *Client) SetTransport(transport runtime.ClientTransport) {
	a.transport = transport
}
