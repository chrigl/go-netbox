// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPIDcimDevicesListParams creates a new APIDcimDevicesListParams object
// with the default values initialized.
func NewAPIDcimDevicesListParams() *APIDcimDevicesListParams {
	var ()
	return &APIDcimDevicesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIDcimDevicesListParamsWithTimeout creates a new APIDcimDevicesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIDcimDevicesListParamsWithTimeout(timeout time.Duration) *APIDcimDevicesListParams {
	var ()
	return &APIDcimDevicesListParams{

		timeout: timeout,
	}
}

// NewAPIDcimDevicesListParamsWithContext creates a new APIDcimDevicesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIDcimDevicesListParamsWithContext(ctx context.Context) *APIDcimDevicesListParams {
	var ()
	return &APIDcimDevicesListParams{

		Context: ctx,
	}
}

// NewAPIDcimDevicesListParamsWithHTTPClient creates a new APIDcimDevicesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIDcimDevicesListParamsWithHTTPClient(client *http.Client) *APIDcimDevicesListParams {
	var ()
	return &APIDcimDevicesListParams{
		HTTPClient: client,
	}
}

/*APIDcimDevicesListParams contains all the parameters to send to the API endpoint
for the api dcim devices list operation typically these are written to a http.Request
*/
type APIDcimDevicesListParams struct {

	/*AssetTag*/
	AssetTag *string
	/*ClusterID*/
	ClusterID *string
	/*ConsolePorts*/
	ConsolePorts *string
	/*ConsoleServerPorts*/
	ConsoleServerPorts *string
	/*DeviceTypeID*/
	DeviceTypeID *string
	/*HasPrimaryIP*/
	HasPrimaryIP *string
	/*IDIn
	  Multiple values may be separated by commas.

	*/
	IDIn *string
	/*Interfaces*/
	Interfaces *string
	/*IsFullDepth*/
	IsFullDepth *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*MacAddress*/
	MacAddress *string
	/*Manufacturer*/
	Manufacturer *string
	/*ManufacturerID*/
	ManufacturerID *string
	/*Model*/
	Model *string
	/*Name*/
	Name *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*PassThroughPorts*/
	PassThroughPorts *string
	/*Platform*/
	Platform *string
	/*PlatformID*/
	PlatformID *string
	/*Position*/
	Position *float64
	/*PowerOutlets*/
	PowerOutlets *string
	/*PowerPorts*/
	PowerPorts *string
	/*Q*/
	Q *string
	/*RackGroupID*/
	RackGroupID *string
	/*RackID*/
	RackID *string
	/*Region*/
	Region *string
	/*RegionID*/
	RegionID *float64
	/*Role*/
	Role *string
	/*RoleID*/
	RoleID *string
	/*Serial*/
	Serial *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string
	/*Status*/
	Status *string
	/*Tag*/
	Tag *string
	/*Tenant*/
	Tenant *string
	/*TenantID*/
	TenantID *string
	/*VirtualChassisID*/
	VirtualChassisID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithTimeout(timeout time.Duration) *APIDcimDevicesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithContext(ctx context.Context) *APIDcimDevicesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithHTTPClient(client *http.Client) *APIDcimDevicesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithAssetTag adds the assetTag to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithAssetTag(assetTag *string) *APIDcimDevicesListParams {
	o.SetAssetTag(assetTag)
	return o
}

// SetAssetTag adds the assetTag to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetAssetTag(assetTag *string) {
	o.AssetTag = assetTag
}

// WithClusterID adds the clusterID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithClusterID(clusterID *string) *APIDcimDevicesListParams {
	o.SetClusterID(clusterID)
	return o
}

// SetClusterID adds the clusterId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetClusterID(clusterID *string) {
	o.ClusterID = clusterID
}

// WithConsolePorts adds the consolePorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithConsolePorts(consolePorts *string) *APIDcimDevicesListParams {
	o.SetConsolePorts(consolePorts)
	return o
}

// SetConsolePorts adds the consolePorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetConsolePorts(consolePorts *string) {
	o.ConsolePorts = consolePorts
}

// WithConsoleServerPorts adds the consoleServerPorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithConsoleServerPorts(consoleServerPorts *string) *APIDcimDevicesListParams {
	o.SetConsoleServerPorts(consoleServerPorts)
	return o
}

// SetConsoleServerPorts adds the consoleServerPorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetConsoleServerPorts(consoleServerPorts *string) {
	o.ConsoleServerPorts = consoleServerPorts
}

// WithDeviceTypeID adds the deviceTypeID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithDeviceTypeID(deviceTypeID *string) *APIDcimDevicesListParams {
	o.SetDeviceTypeID(deviceTypeID)
	return o
}

// SetDeviceTypeID adds the deviceTypeId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetDeviceTypeID(deviceTypeID *string) {
	o.DeviceTypeID = deviceTypeID
}

// WithHasPrimaryIP adds the hasPrimaryIP to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithHasPrimaryIP(hasPrimaryIP *string) *APIDcimDevicesListParams {
	o.SetHasPrimaryIP(hasPrimaryIP)
	return o
}

// SetHasPrimaryIP adds the hasPrimaryIp to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetHasPrimaryIP(hasPrimaryIP *string) {
	o.HasPrimaryIP = hasPrimaryIP
}

// WithIDIn adds the iDIn to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithIDIn(iDIn *string) *APIDcimDevicesListParams {
	o.SetIDIn(iDIn)
	return o
}

// SetIDIn adds the idIn to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetIDIn(iDIn *string) {
	o.IDIn = iDIn
}

// WithInterfaces adds the interfaces to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithInterfaces(interfaces *string) *APIDcimDevicesListParams {
	o.SetInterfaces(interfaces)
	return o
}

// SetInterfaces adds the interfaces to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetInterfaces(interfaces *string) {
	o.Interfaces = interfaces
}

// WithIsFullDepth adds the isFullDepth to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithIsFullDepth(isFullDepth *string) *APIDcimDevicesListParams {
	o.SetIsFullDepth(isFullDepth)
	return o
}

// SetIsFullDepth adds the isFullDepth to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetIsFullDepth(isFullDepth *string) {
	o.IsFullDepth = isFullDepth
}

// WithLimit adds the limit to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithLimit(limit *int64) *APIDcimDevicesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithMacAddress adds the macAddress to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithMacAddress(macAddress *string) *APIDcimDevicesListParams {
	o.SetMacAddress(macAddress)
	return o
}

// SetMacAddress adds the macAddress to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetMacAddress(macAddress *string) {
	o.MacAddress = macAddress
}

// WithManufacturer adds the manufacturer to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithManufacturer(manufacturer *string) *APIDcimDevicesListParams {
	o.SetManufacturer(manufacturer)
	return o
}

// SetManufacturer adds the manufacturer to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetManufacturer(manufacturer *string) {
	o.Manufacturer = manufacturer
}

// WithManufacturerID adds the manufacturerID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithManufacturerID(manufacturerID *string) *APIDcimDevicesListParams {
	o.SetManufacturerID(manufacturerID)
	return o
}

// SetManufacturerID adds the manufacturerId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetManufacturerID(manufacturerID *string) {
	o.ManufacturerID = manufacturerID
}

// WithModel adds the model to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithModel(model *string) *APIDcimDevicesListParams {
	o.SetModel(model)
	return o
}

// SetModel adds the model to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetModel(model *string) {
	o.Model = model
}

// WithName adds the name to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithName(name *string) *APIDcimDevicesListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithOffset(offset *int64) *APIDcimDevicesListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPassThroughPorts adds the passThroughPorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithPassThroughPorts(passThroughPorts *string) *APIDcimDevicesListParams {
	o.SetPassThroughPorts(passThroughPorts)
	return o
}

// SetPassThroughPorts adds the passThroughPorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetPassThroughPorts(passThroughPorts *string) {
	o.PassThroughPorts = passThroughPorts
}

// WithPlatform adds the platform to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithPlatform(platform *string) *APIDcimDevicesListParams {
	o.SetPlatform(platform)
	return o
}

// SetPlatform adds the platform to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetPlatform(platform *string) {
	o.Platform = platform
}

// WithPlatformID adds the platformID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithPlatformID(platformID *string) *APIDcimDevicesListParams {
	o.SetPlatformID(platformID)
	return o
}

// SetPlatformID adds the platformId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetPlatformID(platformID *string) {
	o.PlatformID = platformID
}

// WithPosition adds the position to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithPosition(position *float64) *APIDcimDevicesListParams {
	o.SetPosition(position)
	return o
}

// SetPosition adds the position to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetPosition(position *float64) {
	o.Position = position
}

// WithPowerOutlets adds the powerOutlets to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithPowerOutlets(powerOutlets *string) *APIDcimDevicesListParams {
	o.SetPowerOutlets(powerOutlets)
	return o
}

// SetPowerOutlets adds the powerOutlets to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetPowerOutlets(powerOutlets *string) {
	o.PowerOutlets = powerOutlets
}

// WithPowerPorts adds the powerPorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithPowerPorts(powerPorts *string) *APIDcimDevicesListParams {
	o.SetPowerPorts(powerPorts)
	return o
}

// SetPowerPorts adds the powerPorts to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetPowerPorts(powerPorts *string) {
	o.PowerPorts = powerPorts
}

// WithQ adds the q to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithQ(q *string) *APIDcimDevicesListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetQ(q *string) {
	o.Q = q
}

// WithRackGroupID adds the rackGroupID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithRackGroupID(rackGroupID *string) *APIDcimDevicesListParams {
	o.SetRackGroupID(rackGroupID)
	return o
}

// SetRackGroupID adds the rackGroupId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetRackGroupID(rackGroupID *string) {
	o.RackGroupID = rackGroupID
}

// WithRackID adds the rackID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithRackID(rackID *string) *APIDcimDevicesListParams {
	o.SetRackID(rackID)
	return o
}

// SetRackID adds the rackId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetRackID(rackID *string) {
	o.RackID = rackID
}

// WithRegion adds the region to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithRegion(region *string) *APIDcimDevicesListParams {
	o.SetRegion(region)
	return o
}

// SetRegion adds the region to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetRegion(region *string) {
	o.Region = region
}

// WithRegionID adds the regionID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithRegionID(regionID *float64) *APIDcimDevicesListParams {
	o.SetRegionID(regionID)
	return o
}

// SetRegionID adds the regionId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetRegionID(regionID *float64) {
	o.RegionID = regionID
}

// WithRole adds the role to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithRole(role *string) *APIDcimDevicesListParams {
	o.SetRole(role)
	return o
}

// SetRole adds the role to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetRole(role *string) {
	o.Role = role
}

// WithRoleID adds the roleID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithRoleID(roleID *string) *APIDcimDevicesListParams {
	o.SetRoleID(roleID)
	return o
}

// SetRoleID adds the roleId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetRoleID(roleID *string) {
	o.RoleID = roleID
}

// WithSerial adds the serial to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithSerial(serial *string) *APIDcimDevicesListParams {
	o.SetSerial(serial)
	return o
}

// SetSerial adds the serial to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetSerial(serial *string) {
	o.Serial = serial
}

// WithSite adds the site to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithSite(site *string) *APIDcimDevicesListParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithSiteID(siteID *string) *APIDcimDevicesListParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithStatus adds the status to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithStatus(status *string) *APIDcimDevicesListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetStatus(status *string) {
	o.Status = status
}

// WithTag adds the tag to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithTag(tag *string) *APIDcimDevicesListParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithTenant adds the tenant to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithTenant(tenant *string) *APIDcimDevicesListParams {
	o.SetTenant(tenant)
	return o
}

// SetTenant adds the tenant to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetTenant(tenant *string) {
	o.Tenant = tenant
}

// WithTenantID adds the tenantID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithTenantID(tenantID *string) *APIDcimDevicesListParams {
	o.SetTenantID(tenantID)
	return o
}

// SetTenantID adds the tenantId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetTenantID(tenantID *string) {
	o.TenantID = tenantID
}

// WithVirtualChassisID adds the virtualChassisID to the api dcim devices list params
func (o *APIDcimDevicesListParams) WithVirtualChassisID(virtualChassisID *string) *APIDcimDevicesListParams {
	o.SetVirtualChassisID(virtualChassisID)
	return o
}

// SetVirtualChassisID adds the virtualChassisId to the api dcim devices list params
func (o *APIDcimDevicesListParams) SetVirtualChassisID(virtualChassisID *string) {
	o.VirtualChassisID = virtualChassisID
}

// WriteToRequest writes these params to a swagger request
func (o *APIDcimDevicesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.AssetTag != nil {

		// query param asset_tag
		var qrAssetTag string
		if o.AssetTag != nil {
			qrAssetTag = *o.AssetTag
		}
		qAssetTag := qrAssetTag
		if qAssetTag != "" {
			if err := r.SetQueryParam("asset_tag", qAssetTag); err != nil {
				return err
			}
		}

	}

	if o.ClusterID != nil {

		// query param cluster_id
		var qrClusterID string
		if o.ClusterID != nil {
			qrClusterID = *o.ClusterID
		}
		qClusterID := qrClusterID
		if qClusterID != "" {
			if err := r.SetQueryParam("cluster_id", qClusterID); err != nil {
				return err
			}
		}

	}

	if o.ConsolePorts != nil {

		// query param console_ports
		var qrConsolePorts string
		if o.ConsolePorts != nil {
			qrConsolePorts = *o.ConsolePorts
		}
		qConsolePorts := qrConsolePorts
		if qConsolePorts != "" {
			if err := r.SetQueryParam("console_ports", qConsolePorts); err != nil {
				return err
			}
		}

	}

	if o.ConsoleServerPorts != nil {

		// query param console_server_ports
		var qrConsoleServerPorts string
		if o.ConsoleServerPorts != nil {
			qrConsoleServerPorts = *o.ConsoleServerPorts
		}
		qConsoleServerPorts := qrConsoleServerPorts
		if qConsoleServerPorts != "" {
			if err := r.SetQueryParam("console_server_ports", qConsoleServerPorts); err != nil {
				return err
			}
		}

	}

	if o.DeviceTypeID != nil {

		// query param device_type_id
		var qrDeviceTypeID string
		if o.DeviceTypeID != nil {
			qrDeviceTypeID = *o.DeviceTypeID
		}
		qDeviceTypeID := qrDeviceTypeID
		if qDeviceTypeID != "" {
			if err := r.SetQueryParam("device_type_id", qDeviceTypeID); err != nil {
				return err
			}
		}

	}

	if o.HasPrimaryIP != nil {

		// query param has_primary_ip
		var qrHasPrimaryIP string
		if o.HasPrimaryIP != nil {
			qrHasPrimaryIP = *o.HasPrimaryIP
		}
		qHasPrimaryIP := qrHasPrimaryIP
		if qHasPrimaryIP != "" {
			if err := r.SetQueryParam("has_primary_ip", qHasPrimaryIP); err != nil {
				return err
			}
		}

	}

	if o.IDIn != nil {

		// query param id__in
		var qrIDIn string
		if o.IDIn != nil {
			qrIDIn = *o.IDIn
		}
		qIDIn := qrIDIn
		if qIDIn != "" {
			if err := r.SetQueryParam("id__in", qIDIn); err != nil {
				return err
			}
		}

	}

	if o.Interfaces != nil {

		// query param interfaces
		var qrInterfaces string
		if o.Interfaces != nil {
			qrInterfaces = *o.Interfaces
		}
		qInterfaces := qrInterfaces
		if qInterfaces != "" {
			if err := r.SetQueryParam("interfaces", qInterfaces); err != nil {
				return err
			}
		}

	}

	if o.IsFullDepth != nil {

		// query param is_full_depth
		var qrIsFullDepth string
		if o.IsFullDepth != nil {
			qrIsFullDepth = *o.IsFullDepth
		}
		qIsFullDepth := qrIsFullDepth
		if qIsFullDepth != "" {
			if err := r.SetQueryParam("is_full_depth", qIsFullDepth); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.MacAddress != nil {

		// query param mac_address
		var qrMacAddress string
		if o.MacAddress != nil {
			qrMacAddress = *o.MacAddress
		}
		qMacAddress := qrMacAddress
		if qMacAddress != "" {
			if err := r.SetQueryParam("mac_address", qMacAddress); err != nil {
				return err
			}
		}

	}

	if o.Manufacturer != nil {

		// query param manufacturer
		var qrManufacturer string
		if o.Manufacturer != nil {
			qrManufacturer = *o.Manufacturer
		}
		qManufacturer := qrManufacturer
		if qManufacturer != "" {
			if err := r.SetQueryParam("manufacturer", qManufacturer); err != nil {
				return err
			}
		}

	}

	if o.ManufacturerID != nil {

		// query param manufacturer_id
		var qrManufacturerID string
		if o.ManufacturerID != nil {
			qrManufacturerID = *o.ManufacturerID
		}
		qManufacturerID := qrManufacturerID
		if qManufacturerID != "" {
			if err := r.SetQueryParam("manufacturer_id", qManufacturerID); err != nil {
				return err
			}
		}

	}

	if o.Model != nil {

		// query param model
		var qrModel string
		if o.Model != nil {
			qrModel = *o.Model
		}
		qModel := qrModel
		if qModel != "" {
			if err := r.SetQueryParam("model", qModel); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.PassThroughPorts != nil {

		// query param pass_through_ports
		var qrPassThroughPorts string
		if o.PassThroughPorts != nil {
			qrPassThroughPorts = *o.PassThroughPorts
		}
		qPassThroughPorts := qrPassThroughPorts
		if qPassThroughPorts != "" {
			if err := r.SetQueryParam("pass_through_ports", qPassThroughPorts); err != nil {
				return err
			}
		}

	}

	if o.Platform != nil {

		// query param platform
		var qrPlatform string
		if o.Platform != nil {
			qrPlatform = *o.Platform
		}
		qPlatform := qrPlatform
		if qPlatform != "" {
			if err := r.SetQueryParam("platform", qPlatform); err != nil {
				return err
			}
		}

	}

	if o.PlatformID != nil {

		// query param platform_id
		var qrPlatformID string
		if o.PlatformID != nil {
			qrPlatformID = *o.PlatformID
		}
		qPlatformID := qrPlatformID
		if qPlatformID != "" {
			if err := r.SetQueryParam("platform_id", qPlatformID); err != nil {
				return err
			}
		}

	}

	if o.Position != nil {

		// query param position
		var qrPosition float64
		if o.Position != nil {
			qrPosition = *o.Position
		}
		qPosition := swag.FormatFloat64(qrPosition)
		if qPosition != "" {
			if err := r.SetQueryParam("position", qPosition); err != nil {
				return err
			}
		}

	}

	if o.PowerOutlets != nil {

		// query param power_outlets
		var qrPowerOutlets string
		if o.PowerOutlets != nil {
			qrPowerOutlets = *o.PowerOutlets
		}
		qPowerOutlets := qrPowerOutlets
		if qPowerOutlets != "" {
			if err := r.SetQueryParam("power_outlets", qPowerOutlets); err != nil {
				return err
			}
		}

	}

	if o.PowerPorts != nil {

		// query param power_ports
		var qrPowerPorts string
		if o.PowerPorts != nil {
			qrPowerPorts = *o.PowerPorts
		}
		qPowerPorts := qrPowerPorts
		if qPowerPorts != "" {
			if err := r.SetQueryParam("power_ports", qPowerPorts); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.RackGroupID != nil {

		// query param rack_group_id
		var qrRackGroupID string
		if o.RackGroupID != nil {
			qrRackGroupID = *o.RackGroupID
		}
		qRackGroupID := qrRackGroupID
		if qRackGroupID != "" {
			if err := r.SetQueryParam("rack_group_id", qRackGroupID); err != nil {
				return err
			}
		}

	}

	if o.RackID != nil {

		// query param rack_id
		var qrRackID string
		if o.RackID != nil {
			qrRackID = *o.RackID
		}
		qRackID := qrRackID
		if qRackID != "" {
			if err := r.SetQueryParam("rack_id", qRackID); err != nil {
				return err
			}
		}

	}

	if o.Region != nil {

		// query param region
		var qrRegion string
		if o.Region != nil {
			qrRegion = *o.Region
		}
		qRegion := qrRegion
		if qRegion != "" {
			if err := r.SetQueryParam("region", qRegion); err != nil {
				return err
			}
		}

	}

	if o.RegionID != nil {

		// query param region_id
		var qrRegionID float64
		if o.RegionID != nil {
			qrRegionID = *o.RegionID
		}
		qRegionID := swag.FormatFloat64(qrRegionID)
		if qRegionID != "" {
			if err := r.SetQueryParam("region_id", qRegionID); err != nil {
				return err
			}
		}

	}

	if o.Role != nil {

		// query param role
		var qrRole string
		if o.Role != nil {
			qrRole = *o.Role
		}
		qRole := qrRole
		if qRole != "" {
			if err := r.SetQueryParam("role", qRole); err != nil {
				return err
			}
		}

	}

	if o.RoleID != nil {

		// query param role_id
		var qrRoleID string
		if o.RoleID != nil {
			qrRoleID = *o.RoleID
		}
		qRoleID := qrRoleID
		if qRoleID != "" {
			if err := r.SetQueryParam("role_id", qRoleID); err != nil {
				return err
			}
		}

	}

	if o.Serial != nil {

		// query param serial
		var qrSerial string
		if o.Serial != nil {
			qrSerial = *o.Serial
		}
		qSerial := qrSerial
		if qSerial != "" {
			if err := r.SetQueryParam("serial", qSerial); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.Tenant != nil {

		// query param tenant
		var qrTenant string
		if o.Tenant != nil {
			qrTenant = *o.Tenant
		}
		qTenant := qrTenant
		if qTenant != "" {
			if err := r.SetQueryParam("tenant", qTenant); err != nil {
				return err
			}
		}

	}

	if o.TenantID != nil {

		// query param tenant_id
		var qrTenantID string
		if o.TenantID != nil {
			qrTenantID = *o.TenantID
		}
		qTenantID := qrTenantID
		if qTenantID != "" {
			if err := r.SetQueryParam("tenant_id", qTenantID); err != nil {
				return err
			}
		}

	}

	if o.VirtualChassisID != nil {

		// query param virtual_chassis_id
		var qrVirtualChassisID string
		if o.VirtualChassisID != nil {
			qrVirtualChassisID = *o.VirtualChassisID
		}
		qVirtualChassisID := qrVirtualChassisID
		if qVirtualChassisID != "" {
			if err := r.SetQueryParam("virtual_chassis_id", qVirtualChassisID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
