// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPIDcimCablesListParams creates a new APIDcimCablesListParams object
// with the default values initialized.
func NewAPIDcimCablesListParams() *APIDcimCablesListParams {
	var ()
	return &APIDcimCablesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIDcimCablesListParamsWithTimeout creates a new APIDcimCablesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIDcimCablesListParamsWithTimeout(timeout time.Duration) *APIDcimCablesListParams {
	var ()
	return &APIDcimCablesListParams{

		timeout: timeout,
	}
}

// NewAPIDcimCablesListParamsWithContext creates a new APIDcimCablesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIDcimCablesListParamsWithContext(ctx context.Context) *APIDcimCablesListParams {
	var ()
	return &APIDcimCablesListParams{

		Context: ctx,
	}
}

// NewAPIDcimCablesListParamsWithHTTPClient creates a new APIDcimCablesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIDcimCablesListParamsWithHTTPClient(client *http.Client) *APIDcimCablesListParams {
	var ()
	return &APIDcimCablesListParams{
		HTTPClient: client,
	}
}

/*APIDcimCablesListParams contains all the parameters to send to the API endpoint
for the api dcim cables list operation typically these are written to a http.Request
*/
type APIDcimCablesListParams struct {

	/*Color*/
	Color *string
	/*Length*/
	Length *float64
	/*LengthUnit*/
	LengthUnit *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Q*/
	Q *string
	/*Status*/
	Status *string
	/*Type*/
	Type *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the api dcim cables list params
func (o *APIDcimCablesListParams) WithTimeout(timeout time.Duration) *APIDcimCablesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api dcim cables list params
func (o *APIDcimCablesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api dcim cables list params
func (o *APIDcimCablesListParams) WithContext(ctx context.Context) *APIDcimCablesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api dcim cables list params
func (o *APIDcimCablesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api dcim cables list params
func (o *APIDcimCablesListParams) WithHTTPClient(client *http.Client) *APIDcimCablesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api dcim cables list params
func (o *APIDcimCablesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithColor adds the color to the api dcim cables list params
func (o *APIDcimCablesListParams) WithColor(color *string) *APIDcimCablesListParams {
	o.SetColor(color)
	return o
}

// SetColor adds the color to the api dcim cables list params
func (o *APIDcimCablesListParams) SetColor(color *string) {
	o.Color = color
}

// WithLength adds the length to the api dcim cables list params
func (o *APIDcimCablesListParams) WithLength(length *float64) *APIDcimCablesListParams {
	o.SetLength(length)
	return o
}

// SetLength adds the length to the api dcim cables list params
func (o *APIDcimCablesListParams) SetLength(length *float64) {
	o.Length = length
}

// WithLengthUnit adds the lengthUnit to the api dcim cables list params
func (o *APIDcimCablesListParams) WithLengthUnit(lengthUnit *string) *APIDcimCablesListParams {
	o.SetLengthUnit(lengthUnit)
	return o
}

// SetLengthUnit adds the lengthUnit to the api dcim cables list params
func (o *APIDcimCablesListParams) SetLengthUnit(lengthUnit *string) {
	o.LengthUnit = lengthUnit
}

// WithLimit adds the limit to the api dcim cables list params
func (o *APIDcimCablesListParams) WithLimit(limit *int64) *APIDcimCablesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the api dcim cables list params
func (o *APIDcimCablesListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the api dcim cables list params
func (o *APIDcimCablesListParams) WithOffset(offset *int64) *APIDcimCablesListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the api dcim cables list params
func (o *APIDcimCablesListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithQ adds the q to the api dcim cables list params
func (o *APIDcimCablesListParams) WithQ(q *string) *APIDcimCablesListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the api dcim cables list params
func (o *APIDcimCablesListParams) SetQ(q *string) {
	o.Q = q
}

// WithStatus adds the status to the api dcim cables list params
func (o *APIDcimCablesListParams) WithStatus(status *string) *APIDcimCablesListParams {
	o.SetStatus(status)
	return o
}

// SetStatus adds the status to the api dcim cables list params
func (o *APIDcimCablesListParams) SetStatus(status *string) {
	o.Status = status
}

// WithType adds the typeVar to the api dcim cables list params
func (o *APIDcimCablesListParams) WithType(typeVar *string) *APIDcimCablesListParams {
	o.SetType(typeVar)
	return o
}

// SetType adds the type to the api dcim cables list params
func (o *APIDcimCablesListParams) SetType(typeVar *string) {
	o.Type = typeVar
}

// WriteToRequest writes these params to a swagger request
func (o *APIDcimCablesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Color != nil {

		// query param color
		var qrColor string
		if o.Color != nil {
			qrColor = *o.Color
		}
		qColor := qrColor
		if qColor != "" {
			if err := r.SetQueryParam("color", qColor); err != nil {
				return err
			}
		}

	}

	if o.Length != nil {

		// query param length
		var qrLength float64
		if o.Length != nil {
			qrLength = *o.Length
		}
		qLength := swag.FormatFloat64(qrLength)
		if qLength != "" {
			if err := r.SetQueryParam("length", qLength); err != nil {
				return err
			}
		}

	}

	if o.LengthUnit != nil {

		// query param length_unit
		var qrLengthUnit string
		if o.LengthUnit != nil {
			qrLengthUnit = *o.LengthUnit
		}
		qLengthUnit := qrLengthUnit
		if qLengthUnit != "" {
			if err := r.SetQueryParam("length_unit", qLengthUnit); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Status != nil {

		// query param status
		var qrStatus string
		if o.Status != nil {
			qrStatus = *o.Status
		}
		qStatus := qrStatus
		if qStatus != "" {
			if err := r.SetQueryParam("status", qStatus); err != nil {
				return err
			}
		}

	}

	if o.Type != nil {

		// query param type
		var qrType string
		if o.Type != nil {
			qrType = *o.Type
		}
		qType := qrType
		if qType != "" {
			if err := r.SetQueryParam("type", qType); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
