// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPIIPAMServicesListParams creates a new APIIPAMServicesListParams object
// with the default values initialized.
func NewAPIIPAMServicesListParams() *APIIPAMServicesListParams {
	var ()
	return &APIIPAMServicesListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPIIPAMServicesListParamsWithTimeout creates a new APIIPAMServicesListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPIIPAMServicesListParamsWithTimeout(timeout time.Duration) *APIIPAMServicesListParams {
	var ()
	return &APIIPAMServicesListParams{

		timeout: timeout,
	}
}

// NewAPIIPAMServicesListParamsWithContext creates a new APIIPAMServicesListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPIIPAMServicesListParamsWithContext(ctx context.Context) *APIIPAMServicesListParams {
	var ()
	return &APIIPAMServicesListParams{

		Context: ctx,
	}
}

// NewAPIIPAMServicesListParamsWithHTTPClient creates a new APIIPAMServicesListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPIIPAMServicesListParamsWithHTTPClient(client *http.Client) *APIIPAMServicesListParams {
	var ()
	return &APIIPAMServicesListParams{
		HTTPClient: client,
	}
}

/*APIIPAMServicesListParams contains all the parameters to send to the API endpoint
for the api ipam services list operation typically these are written to a http.Request
*/
type APIIPAMServicesListParams struct {

	/*Device*/
	Device *string
	/*DeviceID*/
	DeviceID *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Name*/
	Name *string
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*Port*/
	Port *float64
	/*Protocol*/
	Protocol *string
	/*Q*/
	Q *string
	/*Tag*/
	Tag *string
	/*VirtualMachine*/
	VirtualMachine *string
	/*VirtualMachineID*/
	VirtualMachineID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the api ipam services list params
func (o *APIIPAMServicesListParams) WithTimeout(timeout time.Duration) *APIIPAMServicesListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api ipam services list params
func (o *APIIPAMServicesListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api ipam services list params
func (o *APIIPAMServicesListParams) WithContext(ctx context.Context) *APIIPAMServicesListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api ipam services list params
func (o *APIIPAMServicesListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api ipam services list params
func (o *APIIPAMServicesListParams) WithHTTPClient(client *http.Client) *APIIPAMServicesListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api ipam services list params
func (o *APIIPAMServicesListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithDevice adds the device to the api ipam services list params
func (o *APIIPAMServicesListParams) WithDevice(device *string) *APIIPAMServicesListParams {
	o.SetDevice(device)
	return o
}

// SetDevice adds the device to the api ipam services list params
func (o *APIIPAMServicesListParams) SetDevice(device *string) {
	o.Device = device
}

// WithDeviceID adds the deviceID to the api ipam services list params
func (o *APIIPAMServicesListParams) WithDeviceID(deviceID *string) *APIIPAMServicesListParams {
	o.SetDeviceID(deviceID)
	return o
}

// SetDeviceID adds the deviceId to the api ipam services list params
func (o *APIIPAMServicesListParams) SetDeviceID(deviceID *string) {
	o.DeviceID = deviceID
}

// WithLimit adds the limit to the api ipam services list params
func (o *APIIPAMServicesListParams) WithLimit(limit *int64) *APIIPAMServicesListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the api ipam services list params
func (o *APIIPAMServicesListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithName adds the name to the api ipam services list params
func (o *APIIPAMServicesListParams) WithName(name *string) *APIIPAMServicesListParams {
	o.SetName(name)
	return o
}

// SetName adds the name to the api ipam services list params
func (o *APIIPAMServicesListParams) SetName(name *string) {
	o.Name = name
}

// WithOffset adds the offset to the api ipam services list params
func (o *APIIPAMServicesListParams) WithOffset(offset *int64) *APIIPAMServicesListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the api ipam services list params
func (o *APIIPAMServicesListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPort adds the port to the api ipam services list params
func (o *APIIPAMServicesListParams) WithPort(port *float64) *APIIPAMServicesListParams {
	o.SetPort(port)
	return o
}

// SetPort adds the port to the api ipam services list params
func (o *APIIPAMServicesListParams) SetPort(port *float64) {
	o.Port = port
}

// WithProtocol adds the protocol to the api ipam services list params
func (o *APIIPAMServicesListParams) WithProtocol(protocol *string) *APIIPAMServicesListParams {
	o.SetProtocol(protocol)
	return o
}

// SetProtocol adds the protocol to the api ipam services list params
func (o *APIIPAMServicesListParams) SetProtocol(protocol *string) {
	o.Protocol = protocol
}

// WithQ adds the q to the api ipam services list params
func (o *APIIPAMServicesListParams) WithQ(q *string) *APIIPAMServicesListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the api ipam services list params
func (o *APIIPAMServicesListParams) SetQ(q *string) {
	o.Q = q
}

// WithTag adds the tag to the api ipam services list params
func (o *APIIPAMServicesListParams) WithTag(tag *string) *APIIPAMServicesListParams {
	o.SetTag(tag)
	return o
}

// SetTag adds the tag to the api ipam services list params
func (o *APIIPAMServicesListParams) SetTag(tag *string) {
	o.Tag = tag
}

// WithVirtualMachine adds the virtualMachine to the api ipam services list params
func (o *APIIPAMServicesListParams) WithVirtualMachine(virtualMachine *string) *APIIPAMServicesListParams {
	o.SetVirtualMachine(virtualMachine)
	return o
}

// SetVirtualMachine adds the virtualMachine to the api ipam services list params
func (o *APIIPAMServicesListParams) SetVirtualMachine(virtualMachine *string) {
	o.VirtualMachine = virtualMachine
}

// WithVirtualMachineID adds the virtualMachineID to the api ipam services list params
func (o *APIIPAMServicesListParams) WithVirtualMachineID(virtualMachineID *string) *APIIPAMServicesListParams {
	o.SetVirtualMachineID(virtualMachineID)
	return o
}

// SetVirtualMachineID adds the virtualMachineId to the api ipam services list params
func (o *APIIPAMServicesListParams) SetVirtualMachineID(virtualMachineID *string) {
	o.VirtualMachineID = virtualMachineID
}

// WriteToRequest writes these params to a swagger request
func (o *APIIPAMServicesListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.Device != nil {

		// query param device
		var qrDevice string
		if o.Device != nil {
			qrDevice = *o.Device
		}
		qDevice := qrDevice
		if qDevice != "" {
			if err := r.SetQueryParam("device", qDevice); err != nil {
				return err
			}
		}

	}

	if o.DeviceID != nil {

		// query param device_id
		var qrDeviceID string
		if o.DeviceID != nil {
			qrDeviceID = *o.DeviceID
		}
		qDeviceID := qrDeviceID
		if qDeviceID != "" {
			if err := r.SetQueryParam("device_id", qDeviceID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Name != nil {

		// query param name
		var qrName string
		if o.Name != nil {
			qrName = *o.Name
		}
		qName := qrName
		if qName != "" {
			if err := r.SetQueryParam("name", qName); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.Port != nil {

		// query param port
		var qrPort float64
		if o.Port != nil {
			qrPort = *o.Port
		}
		qPort := swag.FormatFloat64(qrPort)
		if qPort != "" {
			if err := r.SetQueryParam("port", qPort); err != nil {
				return err
			}
		}

	}

	if o.Protocol != nil {

		// query param protocol
		var qrProtocol string
		if o.Protocol != nil {
			qrProtocol = *o.Protocol
		}
		qProtocol := qrProtocol
		if qProtocol != "" {
			if err := r.SetQueryParam("protocol", qProtocol); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Tag != nil {

		// query param tag
		var qrTag string
		if o.Tag != nil {
			qrTag = *o.Tag
		}
		qTag := qrTag
		if qTag != "" {
			if err := r.SetQueryParam("tag", qTag); err != nil {
				return err
			}
		}

	}

	if o.VirtualMachine != nil {

		// query param virtual_machine
		var qrVirtualMachine string
		if o.VirtualMachine != nil {
			qrVirtualMachine = *o.VirtualMachine
		}
		qVirtualMachine := qrVirtualMachine
		if qVirtualMachine != "" {
			if err := r.SetQueryParam("virtual_machine", qVirtualMachine); err != nil {
				return err
			}
		}

	}

	if o.VirtualMachineID != nil {

		// query param virtual_machine_id
		var qrVirtualMachineID string
		if o.VirtualMachineID != nil {
			qrVirtualMachineID = *o.VirtualMachineID
		}
		qVirtualMachineID := qrVirtualMachineID
		if qVirtualMachineID != "" {
			if err := r.SetQueryParam("virtual_machine_id", qVirtualMachineID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
