// Code generated by go-swagger; DO NOT EDIT.

// Copyright 2018 The go-netbox Authors.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//   http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

package api

// This file was generated by the swagger tool.
// Editing this file might prove futile when you re-run the swagger generate command

import (
	"net/http"
	"time"

	"golang.org/x/net/context"

	"github.com/go-openapi/errors"
	"github.com/go-openapi/runtime"
	cr "github.com/go-openapi/runtime/client"
	"github.com/go-openapi/swag"

	strfmt "github.com/go-openapi/strfmt"
)

// NewAPICircuitsCircuitTerminationsListParams creates a new APICircuitsCircuitTerminationsListParams object
// with the default values initialized.
func NewAPICircuitsCircuitTerminationsListParams() *APICircuitsCircuitTerminationsListParams {
	var ()
	return &APICircuitsCircuitTerminationsListParams{

		timeout: cr.DefaultTimeout,
	}
}

// NewAPICircuitsCircuitTerminationsListParamsWithTimeout creates a new APICircuitsCircuitTerminationsListParams object
// with the default values initialized, and the ability to set a timeout on a request
func NewAPICircuitsCircuitTerminationsListParamsWithTimeout(timeout time.Duration) *APICircuitsCircuitTerminationsListParams {
	var ()
	return &APICircuitsCircuitTerminationsListParams{

		timeout: timeout,
	}
}

// NewAPICircuitsCircuitTerminationsListParamsWithContext creates a new APICircuitsCircuitTerminationsListParams object
// with the default values initialized, and the ability to set a context for a request
func NewAPICircuitsCircuitTerminationsListParamsWithContext(ctx context.Context) *APICircuitsCircuitTerminationsListParams {
	var ()
	return &APICircuitsCircuitTerminationsListParams{

		Context: ctx,
	}
}

// NewAPICircuitsCircuitTerminationsListParamsWithHTTPClient creates a new APICircuitsCircuitTerminationsListParams object
// with the default values initialized, and the ability to set a custom HTTPClient for a request
func NewAPICircuitsCircuitTerminationsListParamsWithHTTPClient(client *http.Client) *APICircuitsCircuitTerminationsListParams {
	var ()
	return &APICircuitsCircuitTerminationsListParams{
		HTTPClient: client,
	}
}

/*APICircuitsCircuitTerminationsListParams contains all the parameters to send to the API endpoint
for the api circuits circuit terminations list operation typically these are written to a http.Request
*/
type APICircuitsCircuitTerminationsListParams struct {

	/*CircuitID*/
	CircuitID *string
	/*Limit
	  Number of results to return per page.

	*/
	Limit *int64
	/*Offset
	  The initial index from which to return the results.

	*/
	Offset *int64
	/*PortSpeed*/
	PortSpeed *float64
	/*Q*/
	Q *string
	/*Site*/
	Site *string
	/*SiteID*/
	SiteID *string
	/*TermSide*/
	TermSide *string
	/*UpstreamSpeed*/
	UpstreamSpeed *float64
	/*XconnectID*/
	XconnectID *string

	timeout    time.Duration
	Context    context.Context
	HTTPClient *http.Client
}

// WithTimeout adds the timeout to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithTimeout(timeout time.Duration) *APICircuitsCircuitTerminationsListParams {
	o.SetTimeout(timeout)
	return o
}

// SetTimeout adds the timeout to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetTimeout(timeout time.Duration) {
	o.timeout = timeout
}

// WithContext adds the context to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithContext(ctx context.Context) *APICircuitsCircuitTerminationsListParams {
	o.SetContext(ctx)
	return o
}

// SetContext adds the context to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetContext(ctx context.Context) {
	o.Context = ctx
}

// WithHTTPClient adds the HTTPClient to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithHTTPClient(client *http.Client) *APICircuitsCircuitTerminationsListParams {
	o.SetHTTPClient(client)
	return o
}

// SetHTTPClient adds the HTTPClient to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetHTTPClient(client *http.Client) {
	o.HTTPClient = client
}

// WithCircuitID adds the circuitID to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithCircuitID(circuitID *string) *APICircuitsCircuitTerminationsListParams {
	o.SetCircuitID(circuitID)
	return o
}

// SetCircuitID adds the circuitId to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetCircuitID(circuitID *string) {
	o.CircuitID = circuitID
}

// WithLimit adds the limit to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithLimit(limit *int64) *APICircuitsCircuitTerminationsListParams {
	o.SetLimit(limit)
	return o
}

// SetLimit adds the limit to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetLimit(limit *int64) {
	o.Limit = limit
}

// WithOffset adds the offset to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithOffset(offset *int64) *APICircuitsCircuitTerminationsListParams {
	o.SetOffset(offset)
	return o
}

// SetOffset adds the offset to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetOffset(offset *int64) {
	o.Offset = offset
}

// WithPortSpeed adds the portSpeed to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithPortSpeed(portSpeed *float64) *APICircuitsCircuitTerminationsListParams {
	o.SetPortSpeed(portSpeed)
	return o
}

// SetPortSpeed adds the portSpeed to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetPortSpeed(portSpeed *float64) {
	o.PortSpeed = portSpeed
}

// WithQ adds the q to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithQ(q *string) *APICircuitsCircuitTerminationsListParams {
	o.SetQ(q)
	return o
}

// SetQ adds the q to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetQ(q *string) {
	o.Q = q
}

// WithSite adds the site to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithSite(site *string) *APICircuitsCircuitTerminationsListParams {
	o.SetSite(site)
	return o
}

// SetSite adds the site to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetSite(site *string) {
	o.Site = site
}

// WithSiteID adds the siteID to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithSiteID(siteID *string) *APICircuitsCircuitTerminationsListParams {
	o.SetSiteID(siteID)
	return o
}

// SetSiteID adds the siteId to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetSiteID(siteID *string) {
	o.SiteID = siteID
}

// WithTermSide adds the termSide to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithTermSide(termSide *string) *APICircuitsCircuitTerminationsListParams {
	o.SetTermSide(termSide)
	return o
}

// SetTermSide adds the termSide to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetTermSide(termSide *string) {
	o.TermSide = termSide
}

// WithUpstreamSpeed adds the upstreamSpeed to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithUpstreamSpeed(upstreamSpeed *float64) *APICircuitsCircuitTerminationsListParams {
	o.SetUpstreamSpeed(upstreamSpeed)
	return o
}

// SetUpstreamSpeed adds the upstreamSpeed to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetUpstreamSpeed(upstreamSpeed *float64) {
	o.UpstreamSpeed = upstreamSpeed
}

// WithXconnectID adds the xconnectID to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) WithXconnectID(xconnectID *string) *APICircuitsCircuitTerminationsListParams {
	o.SetXconnectID(xconnectID)
	return o
}

// SetXconnectID adds the xconnectId to the api circuits circuit terminations list params
func (o *APICircuitsCircuitTerminationsListParams) SetXconnectID(xconnectID *string) {
	o.XconnectID = xconnectID
}

// WriteToRequest writes these params to a swagger request
func (o *APICircuitsCircuitTerminationsListParams) WriteToRequest(r runtime.ClientRequest, reg strfmt.Registry) error {

	if err := r.SetTimeout(o.timeout); err != nil {
		return err
	}
	var res []error

	if o.CircuitID != nil {

		// query param circuit_id
		var qrCircuitID string
		if o.CircuitID != nil {
			qrCircuitID = *o.CircuitID
		}
		qCircuitID := qrCircuitID
		if qCircuitID != "" {
			if err := r.SetQueryParam("circuit_id", qCircuitID); err != nil {
				return err
			}
		}

	}

	if o.Limit != nil {

		// query param limit
		var qrLimit int64
		if o.Limit != nil {
			qrLimit = *o.Limit
		}
		qLimit := swag.FormatInt64(qrLimit)
		if qLimit != "" {
			if err := r.SetQueryParam("limit", qLimit); err != nil {
				return err
			}
		}

	}

	if o.Offset != nil {

		// query param offset
		var qrOffset int64
		if o.Offset != nil {
			qrOffset = *o.Offset
		}
		qOffset := swag.FormatInt64(qrOffset)
		if qOffset != "" {
			if err := r.SetQueryParam("offset", qOffset); err != nil {
				return err
			}
		}

	}

	if o.PortSpeed != nil {

		// query param port_speed
		var qrPortSpeed float64
		if o.PortSpeed != nil {
			qrPortSpeed = *o.PortSpeed
		}
		qPortSpeed := swag.FormatFloat64(qrPortSpeed)
		if qPortSpeed != "" {
			if err := r.SetQueryParam("port_speed", qPortSpeed); err != nil {
				return err
			}
		}

	}

	if o.Q != nil {

		// query param q
		var qrQ string
		if o.Q != nil {
			qrQ = *o.Q
		}
		qQ := qrQ
		if qQ != "" {
			if err := r.SetQueryParam("q", qQ); err != nil {
				return err
			}
		}

	}

	if o.Site != nil {

		// query param site
		var qrSite string
		if o.Site != nil {
			qrSite = *o.Site
		}
		qSite := qrSite
		if qSite != "" {
			if err := r.SetQueryParam("site", qSite); err != nil {
				return err
			}
		}

	}

	if o.SiteID != nil {

		// query param site_id
		var qrSiteID string
		if o.SiteID != nil {
			qrSiteID = *o.SiteID
		}
		qSiteID := qrSiteID
		if qSiteID != "" {
			if err := r.SetQueryParam("site_id", qSiteID); err != nil {
				return err
			}
		}

	}

	if o.TermSide != nil {

		// query param term_side
		var qrTermSide string
		if o.TermSide != nil {
			qrTermSide = *o.TermSide
		}
		qTermSide := qrTermSide
		if qTermSide != "" {
			if err := r.SetQueryParam("term_side", qTermSide); err != nil {
				return err
			}
		}

	}

	if o.UpstreamSpeed != nil {

		// query param upstream_speed
		var qrUpstreamSpeed float64
		if o.UpstreamSpeed != nil {
			qrUpstreamSpeed = *o.UpstreamSpeed
		}
		qUpstreamSpeed := swag.FormatFloat64(qrUpstreamSpeed)
		if qUpstreamSpeed != "" {
			if err := r.SetQueryParam("upstream_speed", qUpstreamSpeed); err != nil {
				return err
			}
		}

	}

	if o.XconnectID != nil {

		// query param xconnect_id
		var qrXconnectID string
		if o.XconnectID != nil {
			qrXconnectID = *o.XconnectID
		}
		qXconnectID := qrXconnectID
		if qXconnectID != "" {
			if err := r.SetQueryParam("xconnect_id", qXconnectID); err != nil {
				return err
			}
		}

	}

	if len(res) > 0 {
		return errors.CompositeValidationError(res...)
	}
	return nil
}
